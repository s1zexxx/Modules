import random
from asyncio import sleep
from telethon import types
import os
from .. import loader, utils


@loader.owner
def register(cb):
    cbRENEWAL()


class RENEWAL(loader.Module):
    strings = {"name": "RENEWAL"}
    
    async def client_ready(self, client, db) -> None:
        self.db = db
        self.client = client

    async def rnwcmd(self, message):
        '''‚ü®–∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö‚ü© ‚ü®—à–∞–ø–∫–∞‚ü©'''
        args = utils.get_args_raw(message)
        if not args:
            self.db.set(self.strings["name"], "state", False)
            await utils.answer(message, "–ø–æ–∫–∞, —Ç—ã —Å–æ—Å–∞–ª")
            return
        await utils.answer(
            message,
            "<b>–∑–¥–∞—Ä–æ–≤–∞ —Å–æ—Å–∏\n\n",
        )
        text = args.split(' ')
        time = int(text[0])
        sh = text[1:]
        sh = ' '.join(sh)
        reply = await message.get_reply_message()
        wablon = ["—Ç–µ–∫—Å—Ç"]
        self.db.set(self.strings["name"], "state", True)
        while self.db.get(self.strings["name"], "state"):
            await message.respond(sh+(random.choice(wablon)))
            await sleep(time)
            
            
    async def typercmd(self, message):
        """–≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        args = utils.get_args(message)
        if args:
            try:
                await message.delete()
                async with message.client.action(message.chat_id, "typing"):
                    await sleep(int(args[0]))
            except ValueError:
                await message.edit("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏.")
            except Exception as e:
                await message.edit(f"–û—à–∏–±–∫–∞: {str(e)}")
        else:
            await message.edit("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Ç–∞–π–ø–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.")
            
            
    async def client_ready(self, _, db):
        self.db = db

    @staticmethod
    def str2bool(v):
        return v.lower() in (
            "yes",
            "y",
            "ye",
            "yea",
            "true",
            "t",
            "1",
            "on",
            "enable",
            "start",
            "run",
            "go",
            "–¥–∞",
        )


    async def klcmd(self, m: types.Message):
        "[on/off] - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"
        args = utils.get_args_raw(m)
        if not m.chat:
            return
        chat = m.chat.id
        if self.str2bool(args):
            chats: list = self.db.get(self._db_name, "chats", [])
            chats.append(chat)
            chats = list(set(chats))
            self.db.set(self._db_name, "chats", chats)
            return await utils.answer(
                m, self.strings("on").format(self.strings("pref"))
            )
        chats: list = self.db.get(self._db_name, "chats", [])
        try:
            chats.remove(chat)
        except:
            pass
        chats = list(set(chats))
        self.db.set(self._db_name, "chats", chats)
        return await utils.answer(m, self.strings("off").format(self.strings("pref")))



    async def kltcmd(self, m: types.Message):
        '''—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∞–ø–∫–∏'''
        args: str = utils.get_args_raw(m)
        self.db.set(self._db_name, "sh", str(args))
        return await utils.answer(
                m, self.strings("status").format(self.strings("pref"), args)
            )


    async def kilscmd(self, m: types.Message):
        "–∑–∞–¥–µ—Ä–∂–∫–∞ —Å–µ–∫—É–Ω–¥—ã"
        args: str = utils.get_args_raw(m)
        if args.isdigit():
            self.db.set(self._db_name, "chance", int(args))
            return await utils.answer(
                m, self.strings("status").format(self.strings("pref"), args)
            )

        return await utils.answer(
            m, self.strings("need_arg").format(self.strings("pref"))
        )


    async def kilacmd(self, m: types.Message):
        "—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º .txt"
        args: str = utils.get_args_raw(m)
        self.db.set(self._db_name, "text", str(args))
        return await utils.answer(
                m, self.strings("status").format(self.strings("pref"), args)
            )

    async def dlrcmd(self, message):
        """‚ü®—Ä–µ–ø–ª–∞–π‚ü© ‚ü®–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ –∂–µ–ª–∞–Ω–∏—é‚ü© - —Å–∫–∞—á–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ .txt"""
        name = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        if reply:
            await message.edit('–°–∫–∞—á–∏–≤–∞–µ–º...')
            if reply.text:
                text = reply.text
                fname = f'{name or message.id + reply.id}.txt'
                file = open(fname, 'w')
                file.write(text)
                file.close()
                await message.edit(
                    f'—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫: <code>{fname}</code>')
            else:
                ext = reply.file.ext
                fname = f'{name or message.id + reply.id}{ext}'
                await message.client.download_media(reply, fname)
                await message.edit(
                    f'—ç—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫: <code>{fname}</code>')
        else:
            return await message.edit('–Ω–µ—Ç —Ä–µ–ø–ª–∞—è.')


    async def watcher(self, m: types.Message):
        if not isinstance(m, types.Message):
            return
        if m.sender_id == (await m.client.get_me()).id or not m.chat:
            return
        if m.chat.id not in self.db.get(self._db_name, "chats", []):
            return
        ch = self.db.get(self._db_name, "chance", [])
        sh = self.db.get(self._db_name, 'sh', [])
        text = self.db.get(self._db_name, 'text', [])
        with open(f'{text}', 'r', encoding='utf-8') as f:
            a = f.read()
            b = a.split('\n')
            await sleep(ch)
            await m.reply(sh + random.choice(b))
            
            

    async def client_ready(self, client, db):
        self.db = db
        self.users = self.db.get("uam", "users", [])
        self.phrases = self.db.get("uam", "phrases", [])
    
    def add_user(self, user_id: int):
        self.users.append(user_id)
        self.db.set("uam", "users", self.users)
    
    def remove_user(self, user_id: int):
        self.users.remove(user_id)
        self.db.set("uam", "users", self.users)



async def brcmd(self, message):
        
        reply = await message.get_reply_message()
        
        if reply is not None:
            if reply.from_id is not None:
                await utils.answer(
                    message=message,
                    response="<b>·¥Ñ·¥ã·¥è·¥©·¥è ·¥õ—ã ·¥Ñ–¥·¥è—Ö–Ω·¥á…Ø—å,  ô·¥á–¥—å  ô·¥á·¥ß–∏·¥ã–∏–π #·èûux·¥èd·¥áy ·¥®·¥è–π–¥·¥á·¥õ ·¥®·¥è ·¥õ ô·¥è—é –¥—É…Ø—É.</b>"
                )

                self.add_user(reply.from_id)
            
            else:
                await utils.answer(
                    message=message,
                    response="<b>·è°—É–Ω·¥ã—Ü–∏—è –Ω·¥á ·¥©·¥Ä–±·¥è·¥õ·¥Ä·¥á·¥õ –Ω·¥Ä  ô·¥Ñ·¥á ô—ã…Ø–Ω–∏—Ö. üç∫</b>"
                )

        else:
            await utils.answer(
                message=message,
                response="<b>üç∫ ·éª—É–∂·¥á–Ω ·¥©·¥á·¥®·¥ß·¥Ä–π.</b>"
            )
    
async def bccmd(self, message):
        
        reply = await message.get_reply_message()
        
        if reply is not None:
            await utils.answer(
                message=message,
                response="<b>#·èûux·¥èd·¥áy ·¥©·¥Ä…ú·¥©·¥á…ú·¥Ä·¥ß ·¥®–∏…ú–¥—É ·¥õ ô·¥è·¥á–π  ç·¥Ä·¥õ·¥á·¥©–∏ ·¥Ñ ô·¥è–∏ ç ·¥Ñ·¥õ·¥Ä·¥ß—å–Ω—ã ç —Ö—É–π·¥è ç. üç∫</b>"
            )
            
            try:
                self.remove_user(reply.from_id)
            except:
                await utils.answer(
                    message=message,
                    response="<b>·é¢—ã ·¥Ñ—ã–Ω …Ø·¥ß—é—Ö–∏ ·¥®·¥è–¥·¥è—Ö–Ω·¥á…Ø—å ·¥è·¥õ ·¥©—É·¥ã #·èûux·¥èd·¥áy üç∫</b>"
                )

        else:
            await utils.answer(
                message=message,
                response="<b>üç∫ ·éª—É–∂·¥á–Ω ·¥©·¥á·¥®·¥ß·¥Ä–π.</b>"
            )
        
     
async def brmcmd(self, message):
        """–Ω·¥á —Ö—É—è·¥©–∏·¥õ—å  ô—ã–±·¥©·¥Ä–Ω–Ω·¥è·¥¶·¥è ·¥Ñ ô–∏–Ω·¥è·¥©—É·¥Ñ·¥Ä ‚ü®ùóãùñæùóâùóÖùóí‚ü©"""
        
        reply = await message.get_reply_message()
        
        if reply is not None:
            await utils.answer(
                message=message,
                response="<b>·¥õ·¥á·¥©—è–π·¥Ñ—è, ·¥©—É·¥Ñ·¥è–±·¥ß—è–¥—å</b>"
            )
            
            try:
                self.remove_user(reply.from_id)
            except:
                await utils.answer(
                    message=message,
                    response="<b>[œüœü] ·¥õ—ã –Ω·¥á ·¥á–±·¥á–Ω–∏·¥ß œ∂·¥õ·¥è ·¥©—ã·¥ß·¥è ·¥©—É·¥Ñ·¥è·¥Ñ ô–∏–Ω–Ω·¥è·¥á ìÜ©Íë≠ìÜ™</b>"
                )

        else:
            await utils.answer(
                message=message,
                response="<b><code>‚ü®!‚ü© ·¥è·¥õ ô·¥á·¥õ—å –Ω·¥Ä ·¥Ñ·¥è·¥è–±—â·¥á–Ω–∏·¥á ·¥©—É·¥Ñ–Ω—è ô·¥è·¥¶·¥è ·¥®–∏–¥·¥è·¥©·¥Ä ‚ü®!‚ü©</code>"
            )
    
async def watcher(self, message):
        if getattr(message, "from_id", None) in self.users:
            await message.reply(random.choice(shabl + self.phrases))
            
    
async def bscmd(self, message):
        '''–ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö + –®–∞–ø–∫–∞ \n''' 
        args = utils.get_args_raw(message)
        if not args:
            self.db.set(self.strings["name"], "state", False)
            await utils.answer(message, "#—Ä–µ–Ω–µ–≤–∞–ª –µ–±–∞—à–∏—Ç")
            return
        await utils.answer(
            message,
            "#—Ä–µ–Ω–µ–≤–∞–ª –µ–±–∞—à–∏—Ç"
        )
        text = args.split(' ')
        time = int(text[0])
        sh = text[1:]
        sh = ' '.join(sh)
        reply = await message.get_reply_message()
        shabl = ["e"]
        self.db.set(self.strings["name"], "state", True)
        while self.db.get(self.strings["name"], "state"):
            await message.respond(sh+(random.choice(shabl)))
            await sleep(time)
            
async def  bmcmd(self, message):
        """‚ü®…ú·¥Ä–¥·¥á·¥©–∂·¥ã·¥Ä  ô ·¥Ñ·¥á·¥ã—É–Ω–¥·¥Ä—Ö‚ü© ‚ü®…Ø·¥Ä·¥®·¥ã·¥Ä‚ü© ‚ü®ùóãùñæùóâùóÖùóí ùóàùóá ùóÜùñæùñΩùóÇùñ∫‚ü©"""
        args = utils.get_args_raw(message)
        if not args:
            self.db.set(self.strings["name"], "state", False)
            await utils.answer(message, "<b> ç·¥á–¥–∏·¥Ä·¥Ä–Ω–Ω–∏·¥¶–∏·¥ß—è—Ü–∏—è ·¥è·¥õ ç·¥á–Ω·¥á–Ω·¥Ä\n—á·¥õ·¥è–±—ã …ú·¥Ä·¥®—É·¥Ñ·¥õ–∏·¥õ—å –∏·¥Ñ·¥®·¥è·¥ß—å…ú—É–π <code>.bm</code> ‚ü®…ú·¥Ä–¥·¥á·¥©–∂·¥ã·¥Ä  ô ·¥Ñ·¥á·¥ã—É–Ω–¥·¥Ä—Ö‚ü© ‚ü®…Ø·¥Ä·¥®·¥ã·¥Ä‚ü© ‚ü®·¥è·¥õ ô·¥á·¥õ –Ω·¥Ä  ç·¥á–¥–∏·¥Ä…∏·¥Ä–π·¥ß‚ü©</b>")
            return
        await utils.answer(
            message,
            "<b>#lilbiruonomimasen ·¥á–±·¥Ä…Ø–∏·¥õ</b>",
        )
        text = args.split(' ')
        time = int(text[0])
        sh = text[1:]
        sh = ' '.join(sh)
        reply = await message.get_reply_message()
        media = reply.media
        self.db.set(self.strings["name"], "state", True)
        while self.db.get(self.strings["name"], "state"):
            await message.respond(sh+(random.choice(wablon)), file=media)
            await sleep(time)
            
            
async def krestidcmd(self, message):
        "—É–∑–Ω–∞—Ç—å –∞–π–¥–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()

        try:
            if args:
                user = await message.client.get_entity(
                    int(args) if args.isdigit() else args)

            else:
                user = await message.client.get_entity(reply.sender_id)
        except ValueError:
            user = await message.client.get_entity(reply.sender_id)

        await message.edit(
            f"user = <code>{user.first_name}</code>\n"
            f"id = <code>{user.id}</code>"
            
            )
            
            
async def krestchidcmd(self, message):
        "—É–∑–Ω–∞—Ç—å –∞–π–¥–∏ —á–∞—Ç–∞"
        if message.is_private:
            return await message.edit("...")
        args = utils.get_args_raw(message)
        to_chat = None

        try:
            if args:
                to_chat = int(args) if args.isdigit() else args
            else:
                to_chat = message.chat_id


        except ValueError:
            to_chat = message.chat_id

        chat = await message.client.get_entity(to_chat)

        await message.edit(
            f"—á–∞—Ç: <code>{chat.title}</code>\n"
            f"id = <code>{chat.id}</code>"
            
            )

async def client_ready(self, client, db) -> None:
        self.db = db
        self.client = client

async def dlr1cmd(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ .dlr <—Ä–µ–ø–ª–∞–π –Ω–∞ —Ñ–∞–π–ª> <–Ω–∞–∑–≤–∞–Ω–∏–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)> —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª, –ª–∏–±–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–¥–µ–ª–∞–Ω —Ä–µ–ø–ª–∞–π."""
        name = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        if reply:
            await message.edit('–°–∫–∞—á–∏–≤–∞–µ–º...')
            if reply.text:
                text = reply.text
                fname = f'{name or message.id + reply.id}.txt'
                file = open(fname, 'w')
                file.write(text)
                file.close()
                await message.edit(
                    f'–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫: <code>{fname}</code>')
            else:
                ext = reply.file.ext
                fname = f'{name or message.id + reply.id}{ext}'
                await message.client.download_media(reply, fname)
                await message.edit(
                    f'–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫: <code>{fname}')
        else:
            return await message.edit('–ù–µ—Ç —Ä–µ–ø–ª–∞—è.')

async def shbcmd(self, message):
        """—Ç–∞–π–º–∏–Ω–≥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö + –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞(—Å .txt) + —à–∞–ø–∫–∞"""
        shapka = utils.get_args_raw(message)
        if not shapka:
            self.db.set(self.strings["name"], "state", False)
            await utils.answer(message, "<b>–ú–æ–¥—É–ª—å Shaby –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>")
            return
        await utils.answer(
            message,
            "<b>–ú–æ–¥—É–ª—å Shaby –∑–∞–ø—É—â–µ–Ω!\n\n"
            "–ß—Ç–æ–±—ã –µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π <code>.shb</code></b>",
        )
        text = shapka.split(' ')
        time = int(text[0])
        sh = ''.join(text[1])
        shp = ' '.join(text[2:])
        self.db.set(self.strings["name"], "state", True)
        while self.db.get(self.strings["name"], "state"):
            with open(f'{sh}', 'r', encoding='utf-8') as f:
                s = f.read()
                w = s.split('\n')
                await message.respond((shp + random.choice(w)))
                await sleep(time)
