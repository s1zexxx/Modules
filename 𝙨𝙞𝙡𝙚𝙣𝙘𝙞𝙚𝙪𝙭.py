# meta author: @arrestov
#meta developer: @arrestov
import random
from asyncio import sleep
import os
from .. import loader, utils
from telethon.tl.functions.users import GetFullUserRequest
import time 
from telethon.tl.types import Message

@loader.tds
class SilencieuxHelp(loader.Module):
    '''Модуль sɪʟᴇɴᴄɪᴇᴜx'''
    strings = {
    "name":  "🇫🇷sɪʟᴇɴᴄɪᴇᴜx🇫🇷",
    "loading": "<b>🇫🇷 Ꮮᴏᴀding sɪʟᴇɴᴄɪᴇᴜx... 🇫🇷</b>",
    "not_chat": "<b>🇫🇷 Ꭹᴏu wᴏrshiᴩ sɪʟᴇɴᴄɪᴇᴜx 🇫🇷",} # name loader () \n


    async def client_ready(self, client, db) -> None:
        self.db = db
        self.client = client
       
    async def shelpcmd(self, message):
        """🇫🇷 Зᴀᴨуᴄᴛиᴛь ᴀниʍᴀцию sɪʟᴇɴᴄɪᴇᴜx 🇫🇷"""
        args = utils.get_args_raw(message)
        await message.edit("🇫🇷 s")
        time.sleep(0.1)
        await message.edit("🇫🇷 sɪ")
        time.sleep(0.1)
        await message.edit("🇫🇷 sɪʟ")
        time.sleep(0.1)
        await message.edit("🇫🇷 sɪʟᴇ")
        time.sleep(0.1)
        await message.edit("🇫🇷 sɪʟᴇɴ")
        time.sleep(0.1)
        await message.edit("🇫🇷 sɪʟᴇɴᴄ")
        time.sleep(0.1)
        await message.edit("🇫🇷 sɪʟᴇɴᴄɪ")
        time.sleep(0.1)
        await message.edit("🇫🇷 sɪʟᴇɴᴄɪᴇ")
        time.sleep(0.1)
        await message.edit("🇫🇷 sɪʟᴇɴᴄɪᴇᴜ")
        time.sleep(0.1)
        await message.edit("🇫🇷 sɪʟᴇɴᴄɪᴇᴜx")
        time.sleep(0.1)
        await message.edit("🇫🇷Поклоняюсь #ꇙ꒐꒒ꏂꋊꉔ꒐ꏂ꒤ꉧ🇫🇷")
        time.sleep(0.1)
        await message.edit("🇫🇷🇫🇷Je m'incline devant Rinny🇫🇷🇫🇷")
        time.sleep(0.1)
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        
        message = await utils.answer(message, self.strings("loading"))

        try:
            user_id = (
                (
                    (
                        await self._client.get_entity(
                        args if not args.isdigit() else int(args)
                        )
                    ).id
                )
                if args
                else reply.sender_id
            )
        except Exception:
            user_id = self._tg_id

            user = await self._client(GetFullUserRequest(user_id))

            user_ent = user.users[0]

            photo = await self._client.download_profile_photo(user_ent.id, bytes)

            user_info = (
            "<b>🇫🇷🇫🇷🇫🇷—<I>Ｓｉｌｅｎｃｉｅｕｘ</I>—🇫🇷🇫🇷🇫🇷:</b>\n\n"
            "<b>⛧.sil1 - 🇫🇷 — Зᴀдᴇᴩжᴋᴀ + ɯᴀбᴧ: Зᴀᴨуᴄᴋᴀᴇᴛ ʍᴏдуᴧь ᴨᴏ 1 ɯᴀбᴧ — 🇫🇷</b>\n\n"
            "<b>⛧.silm - 🇫🇷 — Зᴀдᴇᴩжᴋᴀ + ɯᴀбᴧ: Зᴀᴨуᴄᴋᴀᴇᴛ ʍᴏдуᴧь ᴨᴏ ʍᴇдиᴀ  — 🇫🇷</b>\n\n"
            "<b>⛧.sil2 - 🇫🇷 — Зᴀдᴇᴩжᴋᴀ + ɯᴀбᴧ: Зᴀᴨуᴄᴋᴀᴇᴛ ʍᴏдуᴧь ᴨᴏ 2 ɯᴀбᴧ — 🇫🇷</b>\n\n"
            "<b>🇫🇷🇫🇷ᎠᎬᏉᎬᏝᎾᏢᎬᏒ: @arrestov     🇫🇷🇫🇷 </b>\n\n"
f"<b>Username:</b> @{user_ent.username or '☠️'}\n"
            f"<b>First name:</b> {user_ent.first_name or '🚫'}\n"
            f"<b>ID:</b> <code>{user_ent.id}</code>\n"
        )

        if photo:
            await self._client.send_file(
                message.peer_id,
                photo,
                caption=user_info,
                link_preview=False,
                reply_to=reply.id if reply else None,
            )
            if message.out:
                await message.delete()
        else:
            await utils.answer(
                message,
                user_info,
                reply_to=reply.id if reply else None,
                link_preview=False,
            )


    async def sil1cmd(self, message):
        '''🇫🇷 Зᴀᴨуᴄᴋᴀᴇᴛ ʍᴏдуᴧь ᴨᴏ 1 ɯᴀбᴧᴏну 🇫🇷 \n'''
        args = utils.get_args_raw(message)
        if not args:
            self.db.set(self.strings["name"], "state", False)
            await utils.answer(message, "<b>🇫🇷 Мᴏдуᴧь ᴨᴏ 1 ɯᴀбᴧᴏну остановлен 🇫🇷</b>")
            return
        await utils.answer(
            message,
            "<b>🇫🇷 Мᴏдуᴧь ᴨᴏ 1 ɯᴀбᴧᴏну запущен 🇫🇷 \n\n"
            "🇫🇷 Ꮞᴛᴏбы ᴏᴄᴛᴀнᴏʙиᴛь ʍᴏдуᴧь, нᴀᴨиɯи <code>.sil1</code></b>"
        )
        text = args.split(' ')
        time = int(text[0])
        sh = text[1:]
        sh = ' '.join(sh)
        reply = await message.get_reply_message()
        shabl = [ 
        'ᴛʙᴏя ʍᴀᴛь ʍнᴇ ʙ нᴀᴄᴧᴇдᴄᴛʙᴏ ɜᴀʙᴇщᴀᴧᴀ ᴛʙᴏй ᴩᴏᴛ ᴇᴄᴧи будᴇɯь ϶ᴛᴏ ᴏᴛᴩицᴀᴛь я ᴇё хуёʍ иɜ ᴦᴩᴏбᴀ дᴏᴄᴛᴀну чᴛᴏбы ᴏнᴀ ᴨᴏдᴛʙᴇᴩдиᴧᴀ 🇫🇷',
'ну чё ᴨᴩиᴄᴛуᴨиʍ ᴩᴀᴄчᴇхᴧяᴛь ᴛʙᴏю ʍᴀᴛь иᴧи ᴛы дᴀжᴇ ᴨᴏбᴏиɯьᴄя ᴩыᴨнуᴛьᴄя нᴀ ʍᴇня 🇫🇷',
'ᴛʙᴏя ʍᴀᴛь нᴇ ᴩᴀɜ ᴨᴀдᴀᴧᴀ нᴀ ʍᴏёʍ хую нᴏ ᴏнᴀ ᴄᴛᴩᴇʍиᴧᴏᴄь ᴋ ʙᴇᴩɯинᴇ дуᴩᴀ ᴇбᴀнᴀя 🇫🇷',
'ᴩᴀᴋуɯᴋᴀ нᴀхуй ᴛы ᴨᴩячᴇɯьᴄя ᴄʙᴏю ʍᴛᴀь ᴏᴛ хуя ʍᴏᴇᴦᴏ у нᴇё нᴀ ᴨиɜдᴇ ᴦᴇᴏᴧᴏᴋᴀᴛᴏᴩ 🇫🇷',
'ᴛʙᴏя ʍᴀᴛь ᴧᴇᴦᴧᴀ ᴨᴏд ʍᴏй хуй и ʙᴩёᴛ чᴛᴏ нᴇ ʍᴏжᴇᴛ ʙыᴧᴇɜᴛи 🇫🇷',
'нᴇ хᴏчу ᴛᴇбя ᴏᴄᴋᴏᴩбиᴛь нᴏ ᴛʙᴏя ʍᴀᴛь ᴏᴛᴄᴀᴄыʙᴀᴧᴀ ʍнᴇ ᴨᴏ 100 ᴩᴀɜ нᴀ дню нᴏ дᴧя нᴇё ϶ᴛᴏ нᴇ ᴩᴇᴋᴏᴩд 🇫🇷',
'ну и чё ᴛы дᴏᴄихᴨᴏᴩ дуʍᴀᴇɯь чᴛᴏ ʍᴏй хуй будᴇᴛ ᴇбᴀᴛь ʙᴀɯу ᴄᴇʍйᴋу ɜᴀ бᴇᴄᴨᴧᴀᴛнᴏ ᴄᴋᴏᴩᴏ ʙᴀʍ ᴨᴩидёᴛьᴄя ᴨᴧᴀᴛиᴛь 🇫🇷',
'ᴨᴩᴇждᴇ чᴇʍ ᴛʙᴏя ʍᴀᴛь нᴀчинᴀᴇᴛ ᴄᴏᴄᴀᴛь я бью ᴇй хуёʍ ᴨᴏ ᴦубᴇ ᴇй нᴩᴀʙиᴛьᴄя ʙᴇдь ϶ᴛᴏ ᴨᴀᴄᴛᴀ дᴀʙнᴏ ʙᴏ ʙᴧᴀᴄᴛи ʍᴏᴇᴦᴏ хуя 🇫🇷',
'ᴛы дᴀжᴇ нᴇ ɜᴀʍᴇᴛиɯь ᴋᴀᴋ ᴛʙᴏя ʍᴀᴛь нᴀ ʍᴏй хуй жиᴛь ᴨᴇᴩᴇᴇдᴇᴛ 🇫🇷',
'ᴛʙᴏя ʍᴀᴛь щᴀ ʍᴏй хуй ᴩᴇɯиᴧᴀ ʙ ʍуɜᴇй ᴨᴩᴇнᴇᴄᴛи и ᴄᴋᴀɜᴀᴛь чᴛᴏ ϶ᴛᴏ ʙᴇᴧиᴋий ᴀᴩᴛᴇɸᴀᴋᴛ чё ᴏнᴀ ɯᴀᴧᴏʙᴀ ᴛᴏ ᴛᴀᴋᴀя 🇫🇷',
'бᴇɜ ɯуᴛᴏᴋ ᴇᴄᴧи ᴛʙᴏя ʍᴀᴛь нᴇ нᴀчнёᴛ ʙ ᴛᴇʍᴨᴇ ᴄᴏᴄᴀᴛь я ᴇй ɜᴀᴧуᴨᴏй ᴨᴏ ᴇбᴀᴧу ᴄᴇɜжу 🇫🇷',
'и чё ᴛы щᴀᴄ ᴛᴏжᴇ будᴇɯь ᴏᴛ хуя уʙиᴧиʙᴀᴛь ᴋᴀᴋ ᴛʙᴏя ʍᴀᴛь иᴧи нᴀчнёɯь нᴀ нᴏᴩʍᴇ ᴄᴏᴄᴀᴛь 🇫🇷',
'нᴇ ʍᴏᴦу ᴨᴇᴩᴇдᴀᴛь ᴛᴇ чуʙᴄᴛʙᴀ ᴋᴏᴦдᴀ ᴛʙᴏя ᴄᴨидᴏɜнᴀя ʍᴀʍᴀɯᴀ ʍнᴇ ᴄᴏᴄёᴛ 🇫🇷',
'ᴛʙᴏя ʍᴀʍᴀɯᴀ щᴀ ʍᴏй хуй ɜᴀ щᴇᴋу ᴨуᴄᴛиᴧᴀ и нᴇ хᴏчᴇᴛ ʙыᴄᴏʙыʙᴀᴛь 🇫🇷',
'ᴛʙᴏя ʍᴀᴛь ужᴇ нᴀ ʍᴏй хуй ᴨᴩыᴦᴀᴇᴛ ᴋᴀᴋ нᴀ ᴩᴀбᴏᴛу идёᴛ 🇫🇷',
'ɜᴀчᴇʍ ᴛʙᴏя ʍᴀᴛь ᴏᴨяᴛь ʍнᴇ ᴄᴏᴄёᴛ ʍᴏжᴇᴛ ᴏнᴀ ᴨᴏдуʍᴀᴧᴀ чᴛᴏ ʍᴏжᴇᴛ ᴏᴛᴄᴀᴄыʙᴀᴛь ʍнᴇ бᴇɜᴧᴇʍиᴛнᴏ 🇫🇷',
'ᴛʙᴏя ʍᴀᴛь уᴨᴀᴧᴀ ᴨᴇᴩᴇд ʍᴏиʍ хуёʍ ᴋᴏᴦдᴀ ᴨᴏдᴄᴛᴀʙиᴧ ᴨᴇᴩдᴀᴋ ᴨᴇᴩᴇд ᴄʙᴏиʍ бᴀᴛᴇй нᴏ ϶ᴛᴏᴛ ᴏᴄёᴧ ᴨᴏбᴏяᴧᴄя ᴇᴦᴏ ᴨᴏᴇбᴀᴛь ʙᴇдь ᴏн ɜнᴀᴇᴛ чᴛᴏ ʍᴏя ɜᴀᴧуᴨᴀ ᴏᴨяᴛь ᴨᴩᴏбьёᴛ ᴇᴦᴏ ᴦᴏᴩб 🇫🇷',
'ᴛʙᴏя ʍᴀʍуᴧьᴋᴀ щᴀ ʍᴏй хуй ᴨᴏ ᴦᴧᴀнды ᴨуᴄᴛиᴧᴀ я ᴨᴩᴇдᴧᴀᴦᴀю дᴀᴛь ᴇй ʍᴇдᴀᴧьᴋу ɜᴀ ᴦᴏдᴏʙᴏй ᴏᴛᴄᴏᴄ бᴇɜ ᴨᴇᴩᴇᴩыʙᴀ',
'ну ну ᴄᴋᴀжи чᴛᴏ ᴛʙᴏя ʍᴀʍᴀɯᴋᴀ нᴇ ɯᴀбᴏᴧдᴀ я ᴄʙᴏиʍ хуёʍ ϶ᴛᴏ ᴏᴨᴩᴏʙᴇᴩᴦну 🇫🇷',
'ᴩᴀɜʙᴏᴩᴏɯиᴧ ᴛʙᴏю ʍᴀʍᴀɯᴋу хуёʍ и ʙынᴇᴄ ᴏᴛ ᴛудᴀ ʙᴄё чᴛᴏ ʍᴏжнᴏ 🇫🇷',
'##ꇙ꒐꒒ꏂꋊꉔ꒐ꏂ꒤ꉧ ᴛʙᴏю дуᴩную ʍᴀʍᴀɯу щᴀ нᴀ хуᴇ ɜᴀ ᴛᴀᴋиᴇ дʙижᴇния ᴨᴩᴏʙᴇᴩну 🇫🇷',
'нᴇ ʙᴇᴩиɯь ʍнᴇ чᴛᴏ ᴛʙᴏя ʍᴀʍᴀɯᴀ ʍᴏй хуй бᴇɜᴀᴄᴛᴏнᴏʙчнᴏ ᴄᴏᴄёᴛ ᴛᴀᴋ ᴨᴩихᴏди ᴏнᴀ дᴀᴄᴛ ᴛᴇ уᴩᴏᴋи ᴏᴛᴄᴏᴄᴀ 🇫🇷',
'нᴇ ʍᴏᴦу ᴨᴏняᴛь ᴨᴏчᴇʍу ᴛʙᴏя ʍᴀʍᴀɯᴀ ᴛᴀᴋᴀя ᴄᴧᴀбᴀя ɯᴧюхᴀ чᴛᴏ дᴀжᴇ ʍᴏй хуй ужᴇ ᴏᴄиᴧиᴛь нᴇ ʍᴏжᴇᴛ 🇫🇷',
'ᴛʙᴏю ʍᴀʍᴀɯу щᴀ хуёʍ ᴨᴇᴩᴇʙᴇᴩну хᴏᴛя ϶ᴛᴏ жᴀᴧᴋᴀя нᴀчнёᴛ ᴏᴨяᴛь ʙ ᴋᴏнʙуᴧьᴄиях биᴛьᴄя 🇫🇷',
'ну ужᴇ бᴇɜ ɯуᴛᴏᴋ ʙ ᴛʙᴏᴇй ʍᴀᴛᴇᴩи ᴩᴀɜᴀᴦнᴀᴧᴄя ᴀ ᴏнᴀ нᴀчинᴀᴇᴛ ᴋᴀᴋ ᴄʙинья ʙиɜжᴀᴛь 🇫🇷',
'ᴛʙᴏю ʍᴀᴛь хуёʍ ʙыᴄᴇᴋ ɜᴀ ᴛᴏ чᴛᴏ ᴏнᴀ ᴛʙᴏᴇʍу бᴀᴛи ᴏᴛᴄᴏᴄᴀᴛь ᴨыᴛᴀᴧᴀᴄь 🇫🇷',
'ᴛʙᴏя ʍᴀᴛь ᴧᴇɜᴧᴀ ᴋᴏ ʍнᴇ цᴇᴧᴏʙᴀᴛьᴄя нᴏ ᴇй ɜᴀᴧуᴨᴏй ᴧᴏб ᴩᴀᴄᴋᴩᴏɯиᴧ ᴨуᴄᴛь ɜнᴀᴇᴛ ᴄʙᴏё ʍᴇᴄᴛᴏ 🇫🇷',
'ну и чё ᴛʙᴏя ʍᴀᴛь ужᴇ ᴦиᴧьдию ᴄᴏɜдᴀᴧᴀ чᴛᴏбы ʍᴏй хуй ʙᴏᴄхʙᴀᴧяᴛь 🇫🇷',
'ᴛʙᴏя ʍᴀᴛь щᴀ ʍᴏй хуй ᴨᴩи ᴨᴏдᴩуᴦᴀх ᴩᴀᴄхʙᴀᴧиʙᴀᴧᴀ и ᴏни ᴛᴏжᴇ ᴩᴇɯиᴧи ʍнᴇ ᴏᴛᴄᴏᴄᴀᴛь нᴏ ᴧучɯᴇ ᴛʙᴏᴇй ʍᴀᴛухᴇ нᴇ ᴋᴛᴏ нᴇ ᴄᴏᴄёᴛ 🇫🇷',
'ᴇᴄᴧи ᴛы хᴏчᴇɯь ʍᴏй хуй ᴛᴏᴦдᴀ ᴛᴇ ᴨᴩидёᴛьᴄя ᴨᴏᴋᴏнᴋуᴩиᴩᴏʙᴀᴛь ᴄ ᴛʙᴏᴇй ʍᴀʍᴀɯᴇй 🇫🇷',
'ну и чё ᴛы щᴀᴄ ᴨᴏдᴏхнᴇɯь нᴀ ʍᴏёʍ хую чᴇʍ ᴏᴨᴏɜᴏᴩиɯь ᴄʙᴏю ʍᴀʍᴀɯу хᴏᴛя ʍᴏй хуй и ᴛᴀᴋ ᴇё ᴏᴨуᴄᴛиᴧ ᴇɜ ᴇɜ 🇫🇷',
'ᴛʙᴏя ʍᴀᴛуɯᴋᴀ ʍᴏжᴇᴛ ᴏᴛᴩицᴀᴛь чᴛᴏ ᴄᴏᴄᴀᴧᴀ ʍнᴇ нᴏ у ʍᴇня ᴇᴄᴛь ᴨᴩяʍᴏᴇ дᴏᴋᴀɜᴀᴛᴇᴧьᴄᴛʙᴏ ʙᴇдь я ɜᴀᴋᴀчᴀᴧ ᴇё иɜнуᴛᴩи ᴄᴨᴇᴩʍᴏй 🇫🇷',
'ᴛʙᴏя ʍᴀᴛь ᴨᴩᴏʙиниᴧᴀᴄь ᴨᴇᴩᴇд ʍᴏиʍ хуёʍ и ᴇй ᴨᴩиɯᴧᴏᴄь иɜʙᴇняᴛьᴄя ᴄʙᴏᴇй жᴀᴧᴋᴏй ᴦᴧᴏᴛᴋᴏй 🇫🇷',
'ну ᴛы ᴩиᴧи нᴇ ʙдуᴨᴧяᴇɯь чᴛᴏ ᴛʙᴏя ʍᴀᴛь ʍᴏй хуй ᴩᴇɯиᴧᴀ ʙ ᴀᴩᴇнду ʙɜяᴛь нᴀ дᴇнь иɜ ɜᴀ чᴇᴦᴏ ᴨᴩᴏдᴀᴧᴀ ᴨᴏчᴋу ᴛʙᴏᴇᴦᴏ бᴀᴛи 🇫🇷',
'ну чё будᴇʍ ᴛʙᴏю ʍᴀᴛь ᴇбᴀᴛь иᴧи ᴛы ᴏᴨяᴛь ᴩᴇɯиᴧ ʍᴏй хуй нᴇ ᴄ ᴋᴇʍ нᴇ дᴇᴧиᴛь 🇫🇷',
'хуёʍ ᴛʙᴏю ʍᴀᴛь щᴀ ᴩᴀɜʍᴇниᴩᴏʙᴀᴧ ᴀ ᴏнᴀ ᴏᴛ бᴧᴀᴦᴏдᴀᴩнᴏᴄᴛи ᴏб ʍᴏй хуй ᴄʙᴏю ᴨиɜду ᴄᴛёᴩᴧᴀ нᴀ ᴇɜ ᴇɜ 🇫🇷',
'ᴛʙᴏю ʍᴀᴛь щᴀ ##ꇙ꒐꒒ꏂꋊꉔ꒐ꏂ꒤ꉧ хуёʍ ᴩᴀᴄчᴇᴧᴇниᴧ ᴀ ᴏнᴀ дᴀжᴇ ʙ ᴛᴀᴋᴏʍ ᴨᴏᴧᴏжᴇнии ᴄʍᴏᴦᴧᴀ ᴏᴛᴄᴏᴄᴀᴛь 🇫🇷',
'ᴛʙᴏя ʍᴀᴛь нᴇ ʍᴏжᴇᴛ ᴨᴏняᴛь чᴛᴏ ʍᴏй хуй нᴇ ʙᴄᴇᴦдᴀ будᴇᴛ дᴇᴩжᴀᴛь нᴀд нᴇй ʙᴧᴀᴄᴛь ᴛᴀᴋ ᴛᴏ 🇫🇷',
'хуёʍ ᴛʙᴏю ʍᴀᴛь ᴨᴧᴏʍбиᴩᴏʙᴀᴧ ᴇй дᴀжᴇ ᴋ ᴄᴛᴀʍᴀᴛᴏᴧᴏᴦу хᴏдиᴛь 🇫🇷',
'ᴛʙᴏю ʍᴀᴛь хуёʍ ᴩᴀɜᴩᴇɜᴀᴧ ᴀ ᴏнᴀ ᴨᴏбᴇжᴀᴧᴀ ᴋ ᴛʙᴏᴇʍу бᴀᴛи и ᴨᴏᴋᴀɜᴀᴧᴀ ᴏᴛᴩᴇɜᴀную ᴨиɜду ᴋᴀᴋ ᴨᴩиᴋᴏᴧ 🇫🇷',
'хуёʍ ᴛʙᴏю ʍᴀᴛь нᴀучиᴧ ᴨиᴄᴀᴛь нᴏ ᴏнᴀ ᴨᴧᴏхᴏ ʙᴏᴄᴨᴩиниʍᴀᴇᴛ учᴇния и нᴀчинᴀᴇᴛ ᴄᴏᴄᴀᴛь нᴀ ᴀʙᴛᴏʍᴀᴛᴇ 🇫🇷',
'я ᴄᴛᴩᴇᴧяᴧ ʙ ᴛʙᴏю ʍᴀᴛь хуёʍ ʙыᴄᴛᴩᴇᴧиᴧ и ᴏнᴀ ᴛʙᴀᴩь ᴏжиᴧᴀ и нᴀчᴀᴧᴀ ᴨᴏᴧɜᴛи ᴋ ʍᴏᴇʍу хую 🇫🇷',
'ᴛʙᴏя ʍᴀᴛь ᴏчᴇнь ᴏбᴩᴀдᴏʙᴀᴧᴀᴄь ᴋᴏᴦдᴀ я ᴄᴏᴦᴧᴀᴄиᴧᴄя ᴇᴇ бᴇдняжᴋу ᴨᴏᴋᴏᴩʍиᴛь ᴄʙᴏᴇй ᴄᴨᴇᴩʍᴏй 🇫🇷',
'дᴀʙᴀй ᴛы ᴄᴇйчᴀᴄ ᴏᴛᴄᴏᴄᴇɯь ʍᴏй хуй ᴀ ᴨᴏᴛᴏʍ я ϶ᴛиʍ хуᴇʍ ʙыᴇбу ᴛʙᴏю ʍᴀᴛь ɯᴧюху 🇫🇷',
'϶ᴛᴏ ʙᴄё нᴀ чᴛᴏ ᴛы ᴄᴨᴏᴄᴏбᴇн ᴄын ɯᴧюхи? уйди нᴀхуй нᴇ ᴨᴏɜᴏᴩь ᴄʙᴏю ʍᴀᴛь ɯᴧюху. 🇫🇷',
'ᴛы ᴨᴏниʍᴀᴇɯь чᴛᴏ я ᴄᴇйчᴀᴄ нᴀʍᴀᴛᴀю ᴛʙᴏй ᴩᴏᴛ нᴀ ᴄʙᴏй чᴧᴇн и ɜᴀдуɯу ᴛᴇбя нᴀхуй? 🇫🇷',
'я ᴄᴏʙᴇᴛую ᴛᴇбᴇ ᴨᴏйᴛи нᴀхуй ᴛᴀᴋ ᴋᴀᴋ нᴀ бᴏᴧьɯᴇᴇ чᴇʍ ᴏᴛᴄᴏᴄ ʍᴏᴇᴦᴏ хуя ᴛы нᴇ ᴄᴨᴏᴄᴏбᴇн 🇫🇷',
'ᴋᴏᴦдᴀ ᴛы ᴄᴏᴄᴇɯь ʍᴏй хуй ᴛы нᴀᴄᴧᴀждᴀᴇɯьᴄя ᴋᴀждᴏй ʍинуᴛᴏй, ᴋᴀждᴏй ᴄᴇᴋундᴏй ʙᴇдь ᴛы нᴀᴄᴛᴏᴧьᴋᴏ хᴏᴩᴏɯий хуᴇᴄᴏᴄ и ᴛᴇбᴇ ϶ᴛᴏ ᴨᴩинᴏᴄиᴛ удᴏʙᴏᴧьᴄᴛʙиᴇ 🇫🇷',
'я жᴇ ᴛᴇбя ᴛуᴛ ʙыᴇбу нᴀ ᴄᴨинᴇ ᴛʙᴏᴇй жᴇ ʍᴀʍы и ᴛы ʍнᴇ дᴏᴋᴀжᴇɯь ᴛуᴛ ᴛᴏᴧьᴋᴏ ᴛᴏ, чᴛᴏ ᴛы ᴄᴧᴀбый ᴄын ɯᴧюхи, нᴇ бᴏᴧᴇᴇ. 🇫🇷',
'ᴛы ᴨᴏниʍᴀᴇɯь, чᴛᴏ ᴋᴧиᴛᴏᴩ ᴛʙᴏᴇй ʍᴀᴛᴇᴩи ϶ᴛᴏ чᴩᴇɜʙычᴀйнᴏ ᴏᴨᴀᴄнᴀя ɜᴏнᴀ? 🇫🇷',
'ᴛы дᴀʙᴀй нᴇ ᴨиɜди, ᴀ хуй ʍᴏй ʙᴄᴀᴄи ᴨиɜдᴀбᴏᴧ ᴇбᴀный. ᴛы жᴇ ᴛуᴛ и ᴄуᴛᴏᴋ нᴇ ᴨᴩᴏᴛянᴇɯь, убᴇжиɯь ᴄʙᴏᴇй ʍᴀʍᴀɯᴇ ᴨиɜду ᴧиɜᴀᴛь и хʙᴀᴄᴛᴀᴛьᴄя ᴛᴇʍ, чᴛᴏ ᴏᴛᴄᴏᴄᴀᴧ хуй ʙᴇᴧиᴋᴏʍу ɜᴧᴏдᴇю. 🇫🇷',
'ᴛы ɜнᴀᴧ чᴛᴏ ᴛʙᴏю ʍᴀᴛь хуёʍ иɜ ᴏᴋнᴀ ʙыᴋинуᴧ ᴀ ᴏнᴀ ʙᴄᴛᴀᴧᴀ и дᴀᴧьɯᴇ ᴨᴏбᴇжᴀᴧᴀ 🇫🇷',
'ᴛʙᴏя ʍᴀᴛухᴀ ᴄ 5 ᴧᴇᴛ нᴀ ʍᴏй хуй ʍᴏᴧиᴧᴀᴄь ᴧяʙᴩᴀ ᴇбучᴀя 🇫🇷',
'ᴛʙᴏю ʍᴀʍу хуёʍ ᴛᴀᴋ ᴩᴀɜʙёᴧ чᴛᴏ ᴏнᴀ ʙᴄᴇʍу ᴩᴀйᴏну ᴦᴏʙᴏᴩиᴧ чᴛᴏ ʍᴏй хуй ϶ᴛᴏ ᴩᴇᴧиᴋʙия 🇫🇷',
'ᴛʙᴏю ʍᴀᴛь хуёʍ ᴛᴀᴋ ᴛᴏ дᴏ ᴏᴩᴦᴀɜʍᴀ дᴏʙёᴧ ᴀ ᴛʙᴏй бᴀᴛя ʙ ϶ᴛᴏ ʙᴩᴇʍя ʙ ᴀхуᴇ ᴄᴛᴏяᴧ 🇫🇷',
'ᴛʙᴏя ʍᴀᴛь ужᴇ дᴀʙнᴏ нᴀ хуᴇ ʍᴏёʍ ᴄидиᴛ ᴏнᴀ дуʍᴀᴇᴛ чᴛᴏ ᴇᴄᴧи ᴨуᴄᴋᴀᴇᴛ ᴄᴨᴇᴩʍᴀᴋ ᴨᴏ ᴋᴩᴏʙи ᴛᴏ ϶ᴛᴏ нᴏᴩʍᴀ 🇫🇷',
'ᴛы дуʍᴀᴧ чᴛᴏ ᴛʙᴏя ʍᴀᴛь нᴀ ɯᴀᴧᴀʙᴀ ʍы ᴇё ᴄ ᴨᴀцᴀнᴀʍи ɜᴀ дʙᴏᴩᴀʍи хуяʍи ᴨᴏᴧᴏᴄᴏʙᴀᴧи ᴛᴏᴧьᴋᴏ нᴇ ᴋᴏʍу 🇫🇷',
'ᴛы ᴇщё ʍᴏᴧиɯьᴄя ɜᴀ ᴛᴏ чᴛᴏбы ᴛʙᴏя ʍᴀᴛухᴀ ʍнᴇ хуй ᴄᴏᴄᴀᴧᴀ ᴇᴄᴧи дᴀ ᴛᴏ ʍᴏᴦу ᴨᴏɜдᴩᴀʙиᴛь ᴏнᴀ дᴏᴄихᴨᴏᴩ ɜᴀʙиᴄиʍᴀ ᴏᴛ хуя ʍᴏᴇᴦᴏ 🇫🇷',
'ʍᴏᴦу ᴄᴋᴀɜᴀᴛь чᴛᴏ ᴛʙᴏя ʍᴀᴛь ʙ ᴩᴀдᴏᴄᴛь ᴄᴏᴄёᴛ ʍᴏй хуй и ϶ᴛᴏ ᴇй дᴀёᴛ ʍᴏᴩᴇ ᴨᴏᴧᴏжиᴛᴇᴧьных ϶ʍᴏций 🇫🇷',
'и чё ᴛʙᴏя ʍᴀᴛь дᴏᴧᴦᴏ будᴇᴛ биᴛьᴄя ʙ ᴋᴏнʙуᴧьᴄиях ᴏᴛ хуя ʍᴏᴇᴦᴏ ɜᴀбиᴩᴀй ᴇё ᴄᴋᴏᴩᴇй дуᴩнᴏй 🇫🇷',
'ᴛы чё дуʍᴀᴇɯь я щᴀᴄ ᴛʙᴏю ʍᴀᴛь ᴨᴩᴏᴄᴛᴏ ᴛᴀᴋ ᴏᴛᴨущу нᴇ ᴨуᴄᴛь ᴦᴏд ʍнᴇ ᴨᴏᴄᴏᴄёᴛ 🇫🇷',
'ᴛʙᴏя ʍᴀᴛь нᴀ ᴛᴩᴀᴄᴄᴇ ᴄᴛᴏяᴧᴀ и ᴋᴀждый ᴩᴀɜ ждᴀᴧᴀ чᴛᴏ ʍᴏй хуй ᴇё ɜᴀбᴇᴩёᴛ нᴏ я ᴇй ᴧиɯь нᴀ ᴩᴏᴛᴀн ᴋидᴀᴧ и уᴇɜжᴀᴧ 🇫🇷',
'и чё ᴛы дуᴩᴀ ᴇбᴀнᴀя ᴛʙᴏя ʍᴀᴛь ɜᴀ ʍᴏй хуй дᴩᴀᴧᴀᴄь ᴄ дᴇʙᴋᴀʍи ᴏнᴀ дуʍᴀᴧᴀ чᴛᴏ ᴄᴛᴀнᴇᴛ ᴧучɯᴇй ᴏᴛᴄᴏᴄᴋᴏй ʍᴏᴇᴦᴏ хуя ᴏнᴀ ᴨᴏчᴛи дᴏᴄᴛиᴦᴧᴀ ϶ᴛᴏй цᴇᴧи 🇫🇷',
'ᴇᴄᴧи ᴛʙᴏю ʍᴀᴛь ᴨᴏᴄᴀдиᴛь нᴀ ʍᴏй хуй ᴨᴏʙᴇᴩь ᴏнᴀ нᴇ ᴄᴧᴇɜᴇᴛ ᴨᴏᴋᴀ нᴇ уʍᴩёᴛ 🇫🇷',
'#ꇙ꒐꒒ꏂꋊꉔ꒐ꏂ꒤ꉧ я ᴛʙᴏю ʍᴀᴛь ᴩиᴧи хуёʍ ᴨᴏхᴏᴩᴏниᴧ ᴏнᴀ уʍудᴩиᴧᴀᴄь ʙыбᴩᴀᴛьᴄя чᴛᴏбы нᴀ ᴨᴏᴄᴧᴇдᴏᴋ ᴇщё  ᴏᴛᴄᴏᴄᴀᴛь 🇫🇷',
'ну ϶ᴛᴏ ужᴇ ᴄᴛᴩᴀннᴏ чᴛᴏ ᴛʙᴏя ʍᴀᴛь ᴛᴀᴋ чᴀᴄᴛᴏ ʙᴩёᴛ ᴛʙᴏᴇʍу ᴏᴛцу чᴛᴏ ᴏᴛᴄᴀᴄыʙᴀᴇᴛ ʍнᴇ ʙᴄᴇᴦᴏ ᴨᴏ 10 ᴩᴀɜ ʙ дᴇнь 🇫🇷',
'ᴛʙᴏй ᴨᴀхᴀн ᴄниʍᴀᴧ нᴀ ʙидᴇᴏ ᴋᴀᴋ я ᴇбу ᴛʙᴏю ʍᴀᴛь и ᴩᴀдᴏʙᴀᴧᴄя ʙᴇдь я ᴛᴏжᴇ ʙᴇᴧиᴋий дᴧя ᴛʙᴏᴇᴦᴏ ᴨᴀхᴀнᴀ 🇫🇷',
'ʍᴏжᴇɯь ᴦᴏʙᴏᴩиᴛь ʙᴄё чᴛᴏ уᴦᴏднᴏ нᴏ я буду ᴇбᴀᴛь ᴛʙᴏю ʍᴀᴛь ᴨᴏᴋᴀ ᴏнᴀ нᴇ ᴄᴏʙᴇᴩɯиᴛ ᴄуицид 🇫🇷',
'ᴛʙᴏя ʍᴀᴛь дᴀжᴇ нᴇ ʍᴏжᴇᴛ ᴀᴩᴦуʍᴇнᴛиᴩᴏʙᴀᴛь ᴄʙᴏё ᴄᴏᴄᴀния ϶ᴛᴏ ᴄᴛᴀᴧᴏ ᴇё хᴏби 🇫🇷',
'нᴇ дуʍᴀᴧ чᴛᴏ ᴛʙᴏя ʍᴀᴛь ᴄᴏɜдᴀᴄᴛ ɸᴀн ᴋᴧуб дᴧя ʍᴏᴇᴦᴏ хуя и дᴏᴋᴀɜыʙᴀᴛь чᴛᴏ ʍᴏй хуй ᴄᴀʍый ᴧучɯий 🇫🇷',
'и чё ᴛʙᴏя ʍᴀᴛь ʍнᴇ ᴄᴏᴄёᴛ ᴀ ᴛы нᴇʍᴏщь дᴀжᴇ нᴇ ʍᴏжᴇɯь ᴇё ɜᴀʍᴇниᴛь 🇫🇷',
'ᴛы чё бᴧяᴛь я щᴀ ᴛʙᴏю ʍᴀᴛь ʙ ᴨᴇᴩдᴀᴋ хуяᴩю ᴀ ᴏнᴀ ᴨыᴛᴀᴇᴛьᴄя ᴋудᴀ ᴛᴏ убᴇжᴀᴛь 🇫🇷',
'нᴇ ʍᴏᴦу ᴨᴏняᴛь ᴨᴏчᴇʍу ᴛʙᴏя ʍᴀᴛь нᴀ ᴄᴛᴏᴧьᴋᴏ уᴄᴇᴩднᴏ ᴄᴏᴄёᴛ ʍᴏй хуй ᴋ чᴇʍу ᴏнᴀ ᴄᴛᴩᴇʍиᴛьᴄя 🇫🇷',
'ужᴇ ᴄбиᴧᴄя ᴄ чёᴛу ᴄᴋᴏᴧьᴋᴏ я ᴇбᴀᴧ ᴛʙᴏю ʍᴀᴛь нᴀдᴏ ᴄᴨᴩᴏᴄиᴛь у ᴛʙᴏᴇᴦᴏ ᴏᴛцᴀ ʙᴇдь ᴏн дᴩᴏчиᴧ нᴀ ϶ᴛᴏ 🇫🇷',
'ᴛʙᴏй ᴏᴛᴇц дᴀʙнᴏ ужᴇ ухᴏди ᴄ ᴋʙᴀᴩᴛиᴩы и ждёᴛ ᴨᴏᴋᴀ я ᴨᴏᴇбу ᴛʙᴏю ʍᴀᴛь ᴀ ᴨᴏᴛᴏʍ ᴨᴩихᴏдиᴛ ᴋᴀᴋ нᴇ ʙ чёʍ нᴇ быʙᴀᴧ ᴏᴧух ᴛы ᴇбᴀный 🇫🇷',
'я ᴇбᴀᴧ ᴛʙᴏю ʍᴀᴛь ᴨᴏᴋᴀ ϶ᴛᴏ нᴇ ᴄᴛᴀᴧᴏ ʍᴇйнᴄᴛᴩиʍᴏʍ ᴩиᴧи 🇫🇷',
'щᴀᴄ ᴛʙᴏя ʍᴀᴛь ᴋудᴀ ᴛᴏ ᴨᴏбᴇжᴀᴧᴀ и дуʍᴀᴇᴛ чᴛᴏ ᴇй ϶ᴛᴏ ᴨᴏʍᴏжᴇᴛ нᴏ ʙᴇдь ʍᴏй хуй ᴇё ʙᴄᴇ ᴩᴀʙнᴏ дᴏᴦᴏниᴛ 🇫🇷',
'ᴛʙᴏй дᴇд ʙ 45 ʍнᴇ хуй ɜᴀ ᴋуᴄᴏᴋ ᴄᴀᴧᴏ ᴄᴀᴄᴀᴧ ᴩиᴧи нᴇʍᴏщь ᴏн ᴇбᴀный дᴀ 🇫🇷',
'и чё буду ᴇбᴀᴛь ᴛʙᴏю ʍᴀᴛь дᴏ ᴛᴀᴧᴏʙᴀ и ᴛы нᴇ ᴄʍᴏжᴇɯь ʍнᴇ нᴇ чᴇᴦᴏ ᴄᴋᴀɜᴀᴛь ʙᴇдь ᴄᴀʍ ʙ ᴛᴀйнᴇ ʍнᴇ ᴄᴏᴄёɯь 🇫🇷',
'ᴛʙᴏя ʍᴀᴛь ужᴇ дᴀʙнᴏ нᴀчᴀᴧᴀ ᴨᴩᴏяʙᴧяᴛь уʙᴀжᴇния ᴋ ʍᴏᴇʍу хую и ɜдᴀᴩᴏʙᴀᴇᴛьᴄя ᴄ ниʍ 🇫🇷',
'нᴇ ᴛы чё дуʍᴀᴧ чᴛᴏ ᴛʙᴏя ʍᴀᴛь дᴏᴧᴦᴏ ᴄʍᴏжᴇᴛ нᴀ #ꇙ꒐꒒ꏂꋊꉔ꒐ꏂ꒤ꉧ хуй ᴩыᴨᴀᴇᴛьᴄя  ɜᴀ ϶ᴛᴏ хуёʍ ᴨᴏ ᴦᴏᴩбу нᴀʙᴇᴩну 🇫🇷']
        self.db.set(self.strings["name"], "state", True)
        while self.db.get(self.strings["name"], "state"):
            await message.respond(sh+(random.choice(shabl)))
            await sleep(time)
            
    async def silmcmd(self, message):
        '''🇫🇷 Зᴀᴨуᴄᴋᴀᴇᴛ ʍᴏдуᴧь ᴨᴏ ʍᴇдиᴀ ɯᴀбᴧᴏну 🇫🇷'''
        args = utils.get_args_raw(message)
        if not args:
            self.db.set(self.strings["name"], "state", False)
            await utils.answer(message, "<b>🇫🇷 Мᴏдуᴧь ᴨᴏ ʍᴇдиᴀ ɯᴀбᴧᴏну остановлен 🇫🇷</b>")
            return
        await utils.answer(
            message,
            "<b>🇫🇷 Мᴏдуᴧь ᴨᴏ 2 ɯᴀбᴧᴏну запущен 🇫🇷\n\n"
            "🇫🇷 Ꮞᴛᴏбы ᴏᴄᴛᴀнᴏʙиᴛь ʍᴏдуᴧь, нᴀᴨиɯи <code>.silm</code></b>",
        )
        text = args.split(' ')
        time = int(text[0])
        sh = text[1:]
        sh = ' '.join(sh)
        reply = await message.get_reply_message()
        media = reply
        shablon = [ 
        'ᴨᴏᴄᴧᴇ ᴛᴏᴦᴏ ᴋᴀᴋ ᴛʙᴏя ʍᴀᴛь ᴩᴇɯиᴧᴀ ɜᴀᴩᴇйдиᴛь ʍᴏй хуй я ᴏᴛбиᴧ ᴇё ᴩᴇйд нᴏ ᴩᴇɯиᴧ нᴀᴋᴀɜᴛь ɜᴀ ᴄᴛᴏᴧь ниɜᴋᴏᴇ дияния ᴛᴇᴨᴇᴩь ᴏнᴀ ᴧижᴇᴛ ʍᴏᴇʍу ᴋᴇнᴛу ᴨяᴛᴋи ᴏᴩу',
'нᴀ ᴨᴀᴧубᴇ ᴛʙᴏю ʍᴀᴛь ᴇбᴀᴧ нᴇ ᴏдин ʍᴏᴩяᴋ ᴀ ʙᴄё ᴨᴏᴛᴏʍу чᴛᴏ ᴛʙᴏя ʍᴀᴛь нᴇ ʍᴏжᴇᴛ жиᴛь бᴇɜ чужиʙ хуёʙ и дᴀж будучи ʙ ɜᴀᴨᴇᴩᴛи ᴏнᴀ нᴀйдёᴛ ᴋᴀᴋᴏй нибудь хуй',
'нᴇ ʍᴏᴦу ᴨᴏʙᴇᴩиᴛь чᴛᴏ ᴛʙᴏя ʍᴀᴛь ᴛᴀᴋ ᴨᴩᴏᴄᴛᴏ ᴨᴏдᴛᴀᴧᴀᴄь нᴀ ᴨᴩᴏʙᴏᴋᴀцию ᴋинуᴛую ʍᴏиʍ хуёʍ чᴛᴏ ᴛᴇᴨᴇᴩь дᴇᴧᴀᴛь дᴀʙᴀй ᴨᴏ нᴀᴋᴀᴛᴀнᴏй ᴨᴩᴏᴄᴛᴏ ᴩᴀɜᴏᴩʙёʍ ᴇй ᴨᴇᴩдᴀᴋ',
'ᴛʙᴏя ʍᴀʍᴀɯᴀ дᴀжᴇ ᴩᴀундᴀ ᴨᴩᴏᴛиʙ ʍᴏᴇᴦᴏ хуя нᴇ ʙыᴄᴛᴏяᴧᴀ чᴛᴏ ᴛᴇᴨᴇᴩь ᴦʙᴏᴏᴩиᴛь ᴏ ᴨᴏᴧнᴏцᴇнᴏʍ бᴏᴇ ᴨуᴄᴛь ᴛᴩᴇниᴩуᴇᴛьᴄя ᴀ ᴨᴏᴋᴀ ᴏнᴀ ϶ᴛᴏ дᴇᴧᴀᴛь дᴀʙᴀй ᴄᴏᴄи ᴩᴀᴋᴀᴧ',
'нᴀ ᴛᴀᴩɜᴀнᴋᴇ ᴛʙᴏю ʍᴀᴛь ᴇбᴀᴧ ᴋᴏᴦдᴀ ᴏнᴀ ᴨыᴛᴀᴧᴀᴄь ᴄᴨᴩыᴦнуᴛь ᴄ нᴇё я ᴨᴏдхʙᴀᴛиᴧ ᴇё хуёʍ и уᴇбᴀᴧ ᴏб ɜᴇʍᴧю ᴨуᴄᴛь ᴛᴏᴧьᴋᴏ ᴇщё ᴩᴀɜ ᴨᴏᴨᴩᴏбуᴇᴛ ʙыᴋинуᴛь чᴛᴏ нибудь ᴛᴀᴋᴏᴇ',
'нᴇ ʍᴏᴦу нᴇ чᴇᴦᴏ ᴄᴋᴀɜᴀᴛь ᴨᴧᴏхᴏᴦᴏ нᴀᴄчёᴛ ᴛʙᴏᴇй ʍᴀʍуᴧьᴋᴇ нᴏ ᴨᴩидёᴛьᴄя ᴩᴀᴄᴋᴩыᴛь ᴛᴇбᴇ ᴛᴀйну ᴏᴛᴄᴏᴄ ᴛы ʍᴇᴩɜᴋий чᴛᴏ ᴏнᴀ ᴩᴀди ʍᴏᴇᴦᴏ хуя ᴛʙᴏй ᴋᴏʍᴨ ɜᴀᴧᴏжиᴧᴀ ᴏᴩу',
'нᴀ ᴄᴋᴀчᴋᴀх ʙᴄᴇ быᴧи нᴀ ᴋᴏнях ᴀ ᴛʙᴏя ʍᴀᴛь ᴇдинᴄᴛʙᴇнᴀя учᴀᴄᴛницᴀ ᴋᴏᴛᴏᴩᴀя ᴩᴇɯиᴧᴀ ᴨᴩᴏᴄᴋᴀᴛᴀᴛь нᴀ ʍᴏёʍ хуᴇ нᴇ чё ᴛᴀᴋ ᴨᴏᴧучиᴧᴏᴄь ᴋᴄᴛᴀᴛи ʍᴏй хуй ʙɜяᴧ ᴛᴀʍ ᴨᴇᴩʙᴏᴇ ʍᴇᴄᴛᴏ',
'ᴛʙᴏю ʍᴀᴛь ᴋᴀждый дᴇнь хуёʍ ʙ ʍᴀᴦᴀɜ ᴦᴏняю ʙᴇдь я ᴛᴀᴋ ɜᴀᴇбᴀᴧᴄя ᴇй нᴀ ᴩᴏᴛᴀн дᴏʙᴀᴛь чᴛᴏ ᴛᴇᴨᴇᴩь ʍᴏё ᴩᴀɜʙᴧᴇчᴇния ϶ᴛᴏ дᴇᴧᴀᴛь иɜ нᴇё ᴄᴀʍую ᴨᴏᴄᴧуɯную ɯᴧюху',
'ʍᴏжᴇɯь нᴇ ʙᴇᴩиᴛь нᴏ ᴛʙᴏю ʍᴀᴛь ᴨᴇᴩᴇбᴀᴧᴀ ᴨᴏᴧ ᴦᴏᴩᴏдᴀ нᴏ я ᴇдинᴄᴛʙᴇный ɜᴀ чᴇй хуй ᴏнᴀ будᴇᴛ ᴄᴛᴏяᴛь дᴏ ᴋᴏнцᴀ и нᴇ ᴋᴏᴦдᴀ нᴇ ᴄдᴀᴄᴛ ɜᴀднию ᴩиᴧи',
'ᴛʙᴏя ʍᴀᴛь ʍᴏй хуй ʍᴇᴄᴛᴏ ʍᴀᴄᴏжᴏᴩᴀ ᴩᴇɯиᴧᴀ иᴄᴨᴏᴧьɜыʙᴀᴛь нᴏ я нᴇ ɜнᴀю ᴇᴄᴛь ᴧи ʍᴀᴄᴀжᴏᴩ ᴨиɜды ʙᴇдь ᴇдинᴄᴛʙᴇннᴏᴇ чᴛᴏ ᴏнᴀ дᴇᴧᴀᴇᴛ ϶ᴛᴏ ᴄуёᴛ ᴇᴦᴏ ʙ ᴄʙᴏё ᴦнᴇɜдᴏ',
'дᴀжᴇ нᴀ ᴩᴀбᴏᴛᴇ ᴛʙᴏя ʍᴀᴛь ᴋᴏᴦдᴀ ʙᴄᴇ дᴇᴧᴀюᴛ ᴨᴧᴀнᴏʙый ᴏчёᴛ иᴧи ʙыхᴏдяᴛ ᴨᴏᴋуᴩиᴛь ᴏнᴀ ʍнᴇ ᴨᴏ ᴄᴋᴀйᴨу ᴄᴏᴄёᴛ ᴇᴄᴧи быᴧᴏ бы ʙᴏɜʍᴏжнᴏ нᴇ ᴨᴧᴀᴛиᴛь ɜᴀ ʍᴏй хуй ᴏнᴀ бы нᴇ ᴩᴀбᴏᴛᴀᴧᴀ',
'у ᴛʙᴏᴇй ʍᴀᴛᴇᴩи ᴄᴛᴇᴩᴇᴏᴛиᴨнᴏᴇ ʍыɯᴧᴇния ᴏнᴀ дуʍᴀᴇᴛ чᴛᴏ ᴇᴄᴧи я ᴇй нᴇ нᴀʙᴇᴩнуᴧ ᴨᴏ ᴦᴏᴩбу ɜᴀ ᴨᴧᴏхᴏй ʍиньᴇᴛ ᴛᴏ бᴏᴧьɯᴇ ᴛᴀᴋ дᴇᴧᴀᴛь и нᴇ буду ᴋᴀᴋ нᴀ ᴏɯибᴀᴇᴛьᴄя',
'ᴛʙᴏᴇй ʍᴀᴛᴇᴩи ᴧинию жиɜни хуёʍ ᴏбᴏᴩʙᴀᴧ ᴛᴇᴨᴇᴩь ᴇй ᴨᴩидёᴛьᴄя ᴏᴛᴨᴩᴀʙᴧяᴛьᴄя ʙ ʍиᴩ инᴏй нᴀ ɜнᴀя ᴋᴀᴋᴀя ᴛʙᴏя ʍᴀʍᴀɯᴀ ɯᴧюхᴀ ᴏнᴀ дᴀжᴇ ᴛᴀʍ ᴨᴏᴨᴩᴏᴄиᴛ ʍᴏй хуй',
'ʍᴏй хуй ᴛʙᴏю ʍᴀᴛь жᴇ нᴀ ʙᴇᴩхᴋуɯᴋу ɜᴀᴋинуᴧ ᴛᴇᴨᴇᴩь ᴏнᴀ ᴏбщᴀᴇᴛьᴄя ᴄ инᴛᴇᴧᴇᴦᴇнᴛныʍи ᴧюдьʍи нᴏ ʍы ᴛᴏ ʙᴄᴇ ɜнᴀᴇʍ ᴋᴀᴋ ʍы ᴄ ᴨᴀцᴀнᴀʍи ᴇё ᴩᴏᴛᴀн ᴨᴏ ᴋᴩуᴦу ᴨуᴄᴋᴀᴧи',
'нᴇ ᴏᴛᴩицᴀй ᴛᴏᴦᴏ чᴛᴏ ᴛʙᴏя ʍᴀᴛь ᴄдᴀᴧᴀᴄь ʍᴏᴇʍу хую ᴏнᴀ ᴨыᴛᴀᴧᴀᴄь ᴄᴏᴨᴩᴏᴛиʙᴧяᴛьᴄя нᴏ ʍᴏй хуй ᴏᴋᴀɜᴀᴧᴄя ᴄиᴧьнᴇᴇ дᴀжᴇ ᴛʙᴏй ᴏᴨущᴇный ᴏᴛᴇц ᴄ ниʍ нᴇ ᴄʍᴏᴦ ᴄᴨᴩᴀʙиᴛьᴄя',
'ʍᴏжᴇᴛ ᴛы ʍнᴇ ᴄᴋᴀжᴇɯь ᴨᴏчᴇʍу ᴛʙᴏя ʍᴀᴛь ᴇбучᴀя ʍᴏᴧᴇᴋуᴧᴀ ᴏᴨяᴛь ᴩᴇɯиᴧᴀ ʙыʙᴇᴄиᴛь нᴀ ᴄᴛᴇнд ʍᴏй хуй ᴏнᴀ ужᴇ ᴨᴩᴏдᴀᴧᴀᴄь ᴇʍу ᴨᴏᴧнᴏᴄᴛью ᴩиᴧи',
'нᴇ ɜᴀбыʙᴀй ᴋᴛᴏ ᴛʙᴏю ʍᴀᴛь хуёʍ уᴇбᴀᴧ и ʙᴄё ϶ᴛᴏ быᴧᴏ ʙᴏ бᴧᴀᴦᴏ ʙᴇдь ᴛᴇᴨᴇᴩь ᴏнᴀ ᴄᴛᴀᴧᴀ уʍнᴇᴇ и ʍᴇᴄᴛᴏ ᴏᴛᴄᴏᴄᴀ ᴛʙᴏᴇʍу бᴀᴛи ᴛᴇᴨᴇᴩь ᴏнᴀ дᴇᴧᴀᴇᴛ ᴇᴦᴏ ʍнᴇ',
'ʍᴏжᴇᴛ ᴛы щᴀᴄ уᴨᴀдёɯь нᴀ ᴋᴏᴧᴇни и нᴀчнёɯь ʍнᴇ ᴄᴏᴄᴀᴛь ᴀ ᴛᴏ я ᴨᴏɜᴏʙу ᴛʙᴏю ʍᴀᴛь и ᴏнᴀ ужᴇ нᴇ ᴄʍᴏжᴇᴛ ᴏᴛᴏᴩʙᴀᴛьᴄя ᴏᴛ ʍᴏᴇᴦᴏ хуя',
'я жᴇ хуёʍ ᴛʙᴏй ᴨиɜдᴀᴋ ᴨᴏдʙᴇᴄиᴧ нᴀ ᴧюᴄᴛᴩу ᴛᴇᴨᴇᴩь ᴛʙᴏй бᴀᴛя ᴋᴏᴦдᴀ ᴨᴩᴏхᴏдиᴛ ᴩᴀдуᴇᴛьᴄя чᴛᴏ ᴛᴇбя ʙыᴇбᴀᴧ нᴇ ᴋᴀᴋᴏй ᴛᴏ дᴏʙᴩᴏʙый ᴨᴀцᴀн ᴀ я',
'ʍᴏжᴇᴛ ᴛы ʍᴏй хуй ᴄбᴀᴧᴀнᴄиᴩᴏʙᴀннᴏ нᴀчнёɯь ᴄᴏᴄᴀᴛь ᴀ ᴛᴏ чё ᴛы ᴋᴀᴋ ᴧᴀх ɜᴀ ᴏдну щёᴋу ᴨуᴄᴋᴀᴇɯь дᴀʙᴀй ᴨᴩᴇᴄᴛуᴨᴀй иᴧи ᴏᴨяᴛь ᴛʙᴏй бᴀᴛя ᴨᴩидёᴛ и ᴏᴛᴄᴏᴄёᴛ ʍнᴇ',
'ᴛʙᴏй бᴀᴛя нуᴧёʙᴋᴀ нᴇ чᴇᴦᴏ нᴇ ʍᴏжᴇᴛ бᴇɜ ʍᴏᴇᴦᴏ хуя ʙᴇдь ᴏн ᴦᴏʙᴏᴩиᴛ чᴛᴏ ϶ᴛᴏ ᴇᴦᴏ ᴄʙᴇᴛᴧый ᴧучиᴋ ʙ бущуᴇᴇ ʙᴏᴛ ϶ᴛᴏ я ᴇʍу хуёʍ ʍᴏɜᴦи ᴏᴛбиᴧ',
'нᴇ ʙᴇᴩь ᴄʙᴏᴇй ʍᴀᴛᴇᴩи ᴋᴏᴦдᴀ ᴏнᴀ ᴦᴏʙᴏᴩиᴛ чᴛᴏ я ᴛᴇбя нᴇ ᴩᴀɜу нᴇ ᴇбᴀᴧ я ᴛя ᴇщё ᴄ ᴩᴏждᴇния ᴇбᴀᴧ ᴋᴩᴇʙᴇᴛᴋᴀ ᴇбучᴀя',
'ᴇщё ᴏднᴏ ᴄᴧᴏʙᴏ ᴨᴩᴏ ᴛʙᴏю ʍᴀᴛь я ᴛᴇбя хуёʍ ᴩᴀᴄᴛᴇᴩɜᴀю дуᴩᴀ ᴛы ᴇбᴀнᴀя ʙᴇдь ᴛʙᴏя ʍᴀᴛь идᴇᴀᴧьнᴀя ɯᴀᴧᴏʙᴀ нᴇ ᴏбижᴀй ᴇё',
'ᴛы ɜнᴀᴧ чᴛᴏ я ᴛя хуёʍ ᴋᴩᴇᴄᴛиᴧ ᴀ ᴛʙᴏя ʍᴀᴛь уʍудᴩиᴧᴀᴄь дᴀжᴇ ʙ ᴛᴀᴋᴏй ᴏᴛʙᴇᴛᴄᴛʙᴇный ʍᴏʍᴇнᴛ ᴏᴛᴄᴏᴄᴀᴛь ᴄʙящᴇниᴋу',
'я ᴛᴇбя дᴀжᴇ ʙ дᴇᴛᴄᴋᴏʍ ᴄᴀду ᴇбᴀᴧ ᴋᴏᴦдᴀ ᴛы дᴩᴀᴧᴄя ɜᴀ ʍᴀɯинᴋᴇ и ᴨᴧᴀᴋᴀᴧ чᴛᴏ ᴛᴇбя нᴇ дᴀᴧи ʍᴀɯинᴋу ᴋᴛᴏ ᴛᴇ хуй ᴏᴛ ᴏбиды ᴄуʙᴀᴧ',
'ᴛы ᴄᴛᴀᴧ ᴨᴏхᴏжиʍ нᴀ ᴄʙᴏю ʍᴀᴛь ᴛᴇбᴇ ужᴇ ᴛᴏжᴇ нᴇ нужнᴀ ᴨᴩичинᴀ чᴛᴏбы ᴏᴛᴄᴏᴄᴀᴛь ʍнᴇ хуй ну ᴇᴄᴧи ᴛᴀᴋ ᴛᴏ ᴛы ᴛᴏжᴇ дᴏᴄᴛᴏᴇн ɜʙᴀния ᴨдɜᴏбᴏᴩнᴏй ɯᴧюхи',
'нᴇ ʍᴏᴦу ᴨᴏʙᴇᴩиᴛь чᴛᴏ ᴛʙᴏя ʍᴀᴛь ᴏᴨяᴛь ʙɜяᴧᴀᴄь ɜᴀ ᴄᴛᴀᴩᴏᴇ и ᴨыᴛᴀᴇᴛьᴄя ʙыᴄᴧᴇдиᴛь ʍᴏй хуй ну ᴇᴄᴧи ᴏнᴀ ᴨᴏᴨᴀдёᴛьᴄя ʍнᴇ нᴀ ᴦᴧᴀɜᴀ я ᴇё хуёʍ ʙ Ꭺᴩᴀхнᴦᴇᴧьᴄᴋ ɯʙыᴩну',
'нᴇ дуʍᴀй нᴇ чᴇᴦᴏ ᴨᴧᴏхᴏᴦᴏ нᴏ ᴛʙᴏя ʍᴀᴛь ᴋᴏᴄʍᴏнᴀʙᴛ я ᴛᴇбᴇ нᴇ ʙᴩу нᴇ ʙ ᴋᴏᴇʍ ᴄᴧучᴀᴇ ᴀ ɜнᴀᴇɯь нᴀ чёʍ ᴨᴩᴏхᴏдиᴧ ᴇё ᴨᴇᴩʙый ᴨᴏᴧёᴛ нᴀ ʍᴏёʍ хуᴇ ᴏᴩу',
'ʍᴏжᴇᴛ я ᴛᴇбя ᴏᴦᴏᴩчу нᴏ ᴛʙᴏя ʍᴀᴛуɯᴋᴀ щᴀ ʍнᴇ хуй ᴄᴏᴄёᴛ и чᴛᴏ ᴛᴏ бᴏᴩʍᴏчᴇᴛ ϶ᴛᴏ ɯᴀᴧᴏʙᴀ ʍᴇня ᴛᴀᴋ ɜᴀᴇбᴀᴧᴀ я щᴀ ʙᴄᴨᴏᴩю ᴇё хуёʍ ᴨᴩихᴏди и ɜᴀбиᴩᴀй ᴇё',
'ʙᴄё нᴇ ᴛᴀᴋ ᴨᴩᴏᴄᴛᴏ у ᴛʙᴏᴇй ʍᴀᴛᴇᴩи ᴇᴄᴛь ᴄᴛиʍуᴧ ᴄᴏᴄᴀᴛь ʍнᴇ хуй ʙᴇдь я ᴄᴋᴀɜᴀᴧ ᴇᴄᴧи ᴏнᴀ ᴏᴄᴛᴀнᴏʙиᴛьᴄя ᴛᴏ ᴛʙᴏй ᴦᴩяɜный бᴀᴛя уʍᴩёᴛ',
'ᴛʙᴏя ʍᴀᴛь нᴀ ʍᴏёʍ хуᴇ хиᴨ хᴏᴨ ᴛᴀнцᴇʙᴀᴧᴀ и ᴄудья дᴀᴧи ᴇй ᴨᴇᴩʙᴏᴇ ʍᴇᴄᴛᴏ нᴏ нᴇ ɜᴀ ϶ᴛᴏ ᴀ ɜᴀ ʙᴇᴧиᴋᴏᴧᴇᴨный ᴏᴛᴄᴏᴄ ʙ ᴋᴏнцᴇ',
'хᴏчᴇɯь ᴄᴨᴀᴄᴛи ᴄʙᴏю ʍᴀᴛь иɜ ᴩᴀбᴄᴛᴀʙᴀ ʍᴏᴇᴦᴏ хуя ᴨᴩинᴇᴄи ᴇʍу ᴨᴏднᴏɯᴇния ᴛᴏᴦдᴀ ʍᴏжᴇᴛ быᴛь ʍᴏй хуй ᴨᴩᴏᴄᴛиᴛ ᴛʙᴏю ʍᴀᴛуху',
'ᴛʙᴏя ʍᴀᴛь ужᴇ ᴏᴛжиᴧᴀ ᴄʙᴏё нᴀ ʍᴏёʍ хую ᴋᴀᴋ и ᴛʙᴏй ᴏᴛᴇц ᴨᴩиɯᴧᴏ ᴛʙᴏё ʙᴩᴇʍя ᴨᴩыᴦᴀй нᴀ хуй и ᴨᴏᴇхᴀᴧи дуᴩᴇнь',
'ᴛʙᴏя ʍᴀᴛь ʍᴇᴄᴛᴏ ᴛᴀбᴧᴇᴛᴏᴋ ᴏᴛ ᴦᴏᴧᴏʙы ᴦᴧᴏᴛᴀᴇᴛ ʍᴏй хуй ᴄᴋᴀжᴇɯь чᴇʍ ϶ᴛᴏ ᴨᴏʍᴏжᴇᴛ ᴄᴨᴩᴏᴄи у ϶ᴛᴏй ᴇбуяᴇй дуᴩы',
'ᴛʙᴏя ʍᴀᴛь ᴨыᴛᴀᴧᴀᴄь ʙыʙᴇɜᴛи ʍᴏй хуй ᴨᴏ ᴨᴏняᴛияʍ чᴛᴏбы ᴏн бᴏᴧьɯᴇ ᴇё нᴇ ᴛᴩᴏᴦᴀᴧ нᴏ ʍᴏй хуй нᴇ ᴄᴛᴀᴧ ᴇё ᴄᴧуɯᴀᴛь и ᴩᴀᴄёᴋ ᴇй бᴩᴏʙь',
'ʍᴏжᴇᴛ ᴛы будᴇɯь дуʍᴀᴛь чᴛᴏ я ᴨᴧᴏхᴏй нᴏ я дᴏᴋᴀжу ᴏбᴩᴀᴛнᴏᴇ ᴇᴄᴧи бы я нᴇ ᴇбᴀᴧ ᴛʙᴏю ʍᴀᴛь ᴇё бы ᴇбᴀᴧ ʙᴇᴄь ᴦᴏᴩᴏд и ʙᴄᴇ бы ɜнᴀᴧи чᴛᴏ ᴏнᴀ ɯᴀᴧᴏʙᴀ ᴀ ᴛᴀᴋ ɜнᴀᴇʍ ᴛᴏᴧьᴋᴏ ʍы',
'ʍᴏᴦу ᴏбᴩᴀᴛиᴛьᴄя ᴄ ᴨᴩᴏᴄьбᴏй ᴋ ᴛʙᴏᴇй ʍᴀᴛᴇᴩи ᴛы ᴄᴨᴩᴏᴄиɯь ᴋᴀᴋᴏй ну ᴛы чё ᴧᴀх нᴇ ᴨᴏниʍᴀᴇɯь чᴛᴏбы ᴏнᴀ ᴏᴛᴄᴀᴄᴀᴧᴀ ʍнᴇ',
'нᴇ ᴋᴀᴋᴏй ᴇбᴀᴧ ᴛʙᴏя ʍᴀᴛь ᴋᴏᴦдᴀ у ʍᴇня быᴧᴀ ᴛᴇʍᴨᴇᴩᴀᴛуᴩᴀ ᴩᴏᴛ ᴛʙᴏᴇй ʍᴀᴛᴇᴩи ɜᴀʍᴇняᴧ ʍнᴇ ᴦᴩᴀдуᴄниᴋ',
'нᴀ ᴄᴨинᴇ ᴛʙᴏя ʍᴀᴛь нᴀᴋᴏᴧᴏᴧᴀ ʍᴏй хуй и ᴛᴇᴨᴇᴩь хʙᴀᴄᴛᴀᴇᴛьᴄя ʙᴄᴇʍ чᴛᴏ у них нᴇᴛ бᴏᴧᴇᴇ ᴏхуᴇнᴇᴇ ᴛᴀᴛуиᴩᴏʙᴋᴏй чᴇʍ у нᴇё',
'ᴛʙᴏю ʍᴀᴛь ʙ ɜиʍу ᴇбᴀᴧ ᴛᴏᴦдᴀ ᴋᴀᴋ ᴩᴀɜ быᴧ жᴇᴄᴛᴏᴋᴀя ɜиʍᴀ и ʍнᴇ ᴨᴩиɯᴧᴏᴄь ᴇбᴀᴛь ᴛʙᴏю ʍᴀᴛь чᴛᴏбы ᴄᴏᴦᴩᴇᴛьᴄя',
'нᴀ ʍᴀɯинᴇ ᴛʙᴏю ʍᴀᴛь ᴇбᴀᴧ ʙᴄᴇ ᴄᴋᴀжуᴛ чᴛᴏ ᴛʙᴏя ʍᴀᴛь ᴇбучᴀя ɯᴀᴧᴏʙᴀ ᴋᴏᴛᴏᴩᴀя ʙᴇдᴇᴛьᴄя нᴀ ᴛᴀчᴋи нᴏ ᴏни ᴏɯибᴀюᴛьᴄя ᴏнᴀ ʙᴇдёᴛьᴄя нᴀ ʍᴏй хуй',
'нᴀ ʙиᴧᴇ ᴛʙᴏю ʍᴀᴛь ᴇбᴀᴧ и ʍᴏжнᴏ ᴄᴋᴀɜᴀᴛь чᴛᴏ ʍы ʙᴏᴩʙᴀᴧиᴄь ᴛудᴀ нᴇ ɜᴀᴋᴏннᴏ ᴀ ɜнᴀᴇɯь ᴨᴏчᴇʍу ᴨᴏᴛᴏʍу чᴛᴏ ᴛʙᴏᴇй ʍᴀᴛᴇᴩи ɜᴀхᴏᴛᴇᴧᴏᴄь ᴨᴏᴄᴏᴄᴀᴛь ʍᴏй хуй ϶ᴋᴄᴛᴩᴇʍᴀᴧьнᴏ',
'ɜнᴀᴇɯь ᴨᴏчᴇʍу ʍᴇня ʙᴄᴇ ᴨᴀцᴀны нᴀɜыʙᴀᴧи хуᴧиᴦᴀнᴏʍ ᴨᴏᴛᴏʍу чᴛᴏ я ᴛʙᴏю ʍᴀᴛухᴀ ᴨᴏᴄᴧᴇ 8 ᴇбᴀᴧ',
'ʍы ᴧюбиᴧи ᴄᴏбиᴩᴀᴛьᴄя ᴄ ᴨᴀцᴀнᴀʍи и ᴦᴏʙᴏᴩиᴛь ᴏ ᴛʙᴏᴇй ʍᴀᴛᴇᴩи нᴏ ᴩᴀɜᴦᴏʙᴏᴩ ᴏбычнᴏ ɜᴀᴋᴀнчиʙᴀᴧᴄя ᴏдниʍ ʍы ɜʙᴏниᴧи ᴛʙᴏᴇй ʍᴀᴛᴇᴩи чᴛᴏбы ᴏнᴀ ᴏᴛᴄᴀᴄᴀᴧᴀ нᴀʍ хуй нᴇ ᴩᴀɜу нᴇ ᴏᴛᴋᴀɜыʙᴀᴧᴀ',
'ʙ ʍуᴄᴏᴩᴄᴋᴏʍ учᴀᴄᴛᴋᴇ ᴛʙᴏю ʍᴀᴛь ᴨᴏᴇбᴀᴧ ᴋᴏᴦдᴀ ᴇё ɜᴀᴋᴩыᴧи ɜᴀ дᴇᴩɜᴋᴏᴇ ᴄᴏᴄᴀния ʍᴏᴇᴦᴏ хуя я ᴨᴩᴏбᴩᴀᴧᴄя ᴛудᴀ и ʙыᴇбᴀᴧ ᴇё ᴨᴩᴀʙиᴧьнᴏ жᴇ хᴇх',
'нᴀ дᴇнь ᴏᴛᴋᴩыᴛых дʙᴇᴩᴇй ᴛʙᴏю ʍᴀᴛь ᴨᴏᴇбᴀᴧ ᴋᴏᴦдᴀ ʙᴄᴇ ᴄᴏбиᴩᴀᴧиᴄь и быᴧи ᴄᴏᴄᴩᴇᴦᴏᴛᴏчᴇны я ᴛᴏжᴇ быᴧ ʙ ᴄʙᴏёʍ ᴨᴏниʍᴀния нᴀʙᴏᴄᴛᴩён нᴏ я ᴇбᴀᴧ ᴛʙᴏю ʍᴀᴛь',
'нᴀ ɜᴀᴨᴩᴀʙᴋᴇ ᴛʙᴏю ʍᴀᴛь ᴇбᴀᴧ ᴨᴏᴋᴀ ʙᴄᴇ ɜᴀᴨᴩᴀʙᴧяᴧи ʍᴀɯины я ɜᴀᴨᴩᴀʙᴧяᴧ ᴄᴨᴇᴩʍᴀᴋᴏʍ ᴛʙᴏю жᴀᴧᴋую ʍᴀᴛуху',
'нᴀ ᴀʙᴛᴏᴄᴛᴀнции ᴛʙᴏю ʍᴀᴛь ᴇбᴀᴧ ᴨᴏᴋᴀ хᴏдиᴧи ᴀʙᴛᴏбуᴄы ʍᴏй хуй ɜᴏдиᴧ ʙнᴛуᴩи ᴛʙᴏᴇй ʍᴀᴛуɯᴋᴇ ᴏᴩу дуᴩᴇнь',
'нᴀ ʍᴏᴩᴇ ᴛʙᴏю ʍᴀᴛь ᴇбᴀᴧ нᴏ ᴛᴀʍ ᴨᴏᴨыᴛᴀᴧиᴄь у ʍᴇня ᴇё ᴄᴨиɜдᴇᴛь нᴏ ᴏнᴀ ʙᴇᴩнуᴧᴀᴄь ɜᴀ 1000 ᴋʍ ᴋᴏ ʍнᴇ ʙᴇдь ᴏнᴀ ʙᴇᴩнᴀ ʍᴏᴇʍу хую',
'нᴀ ᴋᴀᴩибᴄᴋих ᴏᴄᴛᴩᴏʙᴀх ᴛʙᴏю ʍᴀᴛь ᴇбᴀᴧ ᴏнᴀ ᴩᴇɯиᴧᴀ ɯиᴋᴀнуᴛь и ᴨᴏᴇхᴀᴧᴀ нᴀ ᴏᴄᴛᴩᴏʙᴀ нᴏ ʙɜяᴧᴀ ʍᴇня ʙᴇдь ᴋᴛᴏ ᴇй ᴛᴀʍ нᴀ ᴩᴏᴛᴀн ᴋидᴀᴛь будᴇᴛ',
'нᴀ ɜᴀᴋᴀᴛᴇ ᴛʙᴏю ʍᴀᴛь ᴇбᴀᴧ ʙᴄё быᴧᴏ ᴛᴀᴋ ᴋᴩᴀᴄиʙᴏ ᴋᴩᴏʍᴇ ᴇбᴀᴧᴀ ᴛʙᴏᴇй ʍᴀᴛᴇᴩи ᴨᴩиɯᴧᴏᴄь нᴀ ϶ᴛу дуᴩу ʍᴇɯᴏᴋ нᴀдᴇʙᴀᴛь',
'нᴀ ʙᴇᴩᴛᴏᴧёᴛᴇ ᴛʙᴏю ʍᴀᴛь ᴇбᴀᴧ ᴇй быᴧᴏ ᴄᴛᴩᴀɯнᴏ ᴧᴇᴛᴇᴛь и чᴛᴏбы уᴄᴨᴏᴋᴏиᴛь ᴇё ʍнᴇ ᴨᴩиɯᴧᴏᴄь ᴨᴏᴩʙᴀᴛь ᴇй ᴛᴀʍ ᴀнᴀᴧ',
'нᴀ ʙᴇᴧиᴋᴇ ᴛʙᴏю ʍᴀᴛь ᴇбᴀᴧ ᴛы жᴇ дуᴩᴇнь ᴨᴏниʍᴀᴇɯь чᴛᴏ ᴛʙᴏя ʍᴀᴛь иᴄᴨᴏᴧьɜыʙᴀᴧᴀ ʍᴇᴄᴛᴏ ᴄᴇдуɯᴋᴇ нᴀ ʙᴇᴧиᴋᴇ',
'нᴀ ᴧунᴇ ᴛʙᴏю ʍᴀᴛь ᴇбᴀᴧ ᴨᴏᴋᴀ ᴛʙᴏя ʍᴀᴛь быᴧᴀ ʙ ʙᴏᴄᴛᴏᴩᴦᴇ ᴏᴛ ᴋᴏᴄʍᴏᴄᴀ я ᴇё ᴇбᴀᴧ ᴧᴀйᴋни ɜᴀᴨиᴄи ᴇᴄᴧи я ᴨᴏᴄᴛуᴨиᴧ ᴨᴩᴀʙиᴧьнᴏ',
'нᴀ ᴨᴩᴏʙᴏдᴀх ᴛʙᴏю ʍᴀᴛь ᴇбᴀᴧ ᴨᴏᴋᴀ ᴛʙᴏя ʍᴀᴛухᴀ ᴨᴩᴏʙᴀжᴀᴧᴀ ᴛʙᴏᴇᴦᴏ бᴀᴛю ʙ ᴀᴩʍию ᴏнᴀ ᴨуᴄᴛиᴧᴀ ᴄᴧᴇɜу нᴏ ʙᴄᴇ ɜнᴀᴧи ᴋᴛᴏ будущий ᴦᴏд будᴇᴛ ᴇй нᴀ ᴩᴏᴛᴀн ᴋидᴀᴛь',
'ᴛʙᴏя ʍᴀᴛь ᴄнᴀчᴀᴧᴀ дуʍᴀᴧᴀ чᴛᴏ ʍᴏй хуй нᴇ ʙыɜыʙᴀᴇᴛ ɜᴀʙиᴄиᴄʍᴏᴄᴛ нᴏ ᴄ ᴋᴀждыʍ ᴩᴀɜᴏʍ ᴄᴏᴄᴀᴧᴀ ʙᴄё бᴏᴧьɯᴇ и бᴏᴧьɯᴇ',
'нᴀ ᴩᴀɜᴏᴦᴩᴇʙ ᴛʙᴏю ʍᴀʍᴀɯу ᴨᴏᴇбᴀᴧ ᴀ ᴨᴏᴛᴏʍ ᴛʙᴏй бᴀᴛя ᴩᴇɯиᴧ ʍнᴇ ᴨᴏ ɸᴀну ᴏᴛᴄᴏᴄᴀᴛь я ᴛᴇᴨᴇᴩь дуʍᴀю у ʙᴀᴄ ʙᴩᴏждёнᴏᴇ ʍᴏй хуй ᴄᴏᴄᴀᴛь',
'ʍᴏй хуй ᴨᴩᴏɯёᴧᴄя ᴨᴏ ᴛʙᴏᴇй ʍᴀᴛᴇᴩи ᴏᴛ нᴀчᴀᴧᴀ и дᴏ ᴋᴏнцᴀ и ᴛы дᴏᴧжᴇн быᴛь бᴧᴀᴦᴏдᴀᴩᴇнь чᴛᴏ ʍᴏй хуй ᴏᴄᴛᴀʙиᴧ ᴇё ᴏбᴧиᴛᴏй ᴄᴨᴇᴩʍᴀᴋᴏʍ ᴀ нᴇ ᴩᴀɜʍᴀᴛᴀᴧ',
'ᴩᴀɜᴋᴩᴇᴨᴏᴄᴛиᴧ ᴛʙᴏю ʍᴀᴛь хуёʍ и ᴛᴇᴨᴇᴩь ᴏнᴀ нᴇ ᴛᴀᴋ ᴄиᴧьнᴏ бᴏиᴛьᴄя ᴄᴏᴄᴀᴛь ʍᴏй хуй нᴀ ᴦᴧᴀɜ у ᴛʙᴏᴇᴦᴏ ущᴇᴩбнᴏᴦᴏ ᴏᴛцᴀ',
'нᴀ ᴋᴀнунᴇ ᴛʙᴏю ʍᴀᴛь ᴨᴏᴇбᴀᴧ и ʍᴏᴦу ᴄᴋᴀɜᴀᴛь ᴏднᴏ ᴏнᴀ быᴧᴀ нᴀᴄᴛᴏᴧьᴋᴏ ᴩᴀɜʙᴩᴀᴛнᴏй ɯᴧюхᴏй чᴛᴏ ᴄᴏᴄᴀᴧᴀ ʍнᴇ хуй дᴀжᴇ нᴀ ᴧᴀнчᴇ',
'ʍᴏжᴇᴛ ᴛʙᴏя ʍᴀᴛь дᴧя ᴛᴇбя и ᴧучɯᴀя нᴏ ʍы будᴇʍ ɜнᴀᴛь ʙᴄᴇᴦдᴀ чᴛᴏ ᴄ ʍᴏᴇᴦᴏ хуя ᴏнᴀ ʙыучиᴧᴀᴄь ᴋᴀɜᴀᴛь ᴏбᴩᴀɜᴏʙᴀннᴏй',
'ну щᴀᴄ я нᴀчну ᴋᴩуᴛиᴛь ᴛʙᴏю ʍᴀʍᴀɯу нᴀ хуᴇ бᴇɜ ᴏᴄᴛᴀнᴏʙᴋи ᴀ ᴛы ᴨᴏᴩᴏбуй ᴏᴄᴛᴀнᴏʙиᴛь ϶ᴛу ᴋᴀᴩуᴄᴇᴧь жᴀᴧᴋий ᴛᴏᴧьᴋᴏ ᴄʍᴏᴛᴩи ᴄᴀʍ нᴇ ᴨᴏᴨᴀди нᴀ нᴇё',
'у ᴛʙᴏᴇй ʍᴀᴛᴇᴩи ᴇᴄᴛь ᴋᴏᴩᴏнᴋᴀ ᴋᴏᴦдᴀ ᴄᴏбиᴩᴀюᴛьᴄя ᴩᴏдᴄᴛʙᴇниᴋи и ᴨᴩᴏᴄяᴛ ᴨᴏᴋᴀɜᴀᴛь чᴇᴦᴏ ᴏнᴀ дᴏᴄᴛиᴦᴧᴀ ᴏнᴀ ɜᴏʙёᴛ ʍᴇня и ᴄᴏᴄёᴛ ʍᴏй хуй и ʙᴄᴇ ᴀᴨᴧᴀдиᴩуюᴛ ᴨᴩиᴋинь',
'нᴀ ᴨᴇᴩᴇʙᴀᴧᴇ ᴛʙᴏю ʍᴀᴛь ᴨᴏᴇбᴀᴧ ᴏнᴀ дуʍᴀᴧᴀ чᴛᴏ ᴨᴩᴏᴄᴛᴏ ᴏᴛдᴏхнёᴛ нᴏ ʍᴏй хуй дᴀжᴇ нᴇ ᴏᴄᴛᴀʙиᴧ ᴇй ɯᴀнᴄᴏʙ нᴀ ʙыжиʙᴀния ɜᴀᴛᴏ ᴛᴇᴨᴇᴩь ᴏнᴀ ᴦᴩᴀнᴛ ʍᴀᴄᴛᴇᴩ ᴨᴏ ᴄᴏᴄᴀнию ʍᴏᴇᴦᴏ хуя',
'ᴛʙᴏя ʍᴀᴛуɯᴋᴀ нᴇ ᴛᴀᴋ чᴀᴄᴛᴏ ᴄᴛᴀᴧᴏ ᴄᴏᴄᴀᴛь ʍнᴇ хуй я ᴩᴇɯиᴧ ᴩᴀɜᴏбᴩᴀᴛьᴄя ʙ чёʍ дᴇᴧᴏ ᴏᴋᴀɜыʙᴀᴇᴛьᴄя ᴛʙᴏй бᴀᴛя ᴨᴏᴨᴩᴏᴄиᴧ чᴛᴏб ᴏнᴀ ᴄᴏᴄᴀᴧᴀ ʍнᴇ ᴩᴇжᴇ я ᴋᴀᴋ уᴇбᴀᴧ ᴇᴦᴏ хуёʍ ᴨᴏᴄᴧᴇ чᴇᴦᴏ ᴏн ᴨᴇᴩᴇдуʍᴀᴧ',
'я хᴏчу чᴛᴏбы ᴛʙᴏя ʍᴀᴛь ᴄᴏᴄᴀᴧᴀ ʍнᴇ дᴏ ᴋᴏнцᴀ ʙᴇᴋᴀ нᴏ я ᴨᴏниʍᴀю чᴛᴏ ᴛʙᴏя ʍᴀᴛь нᴇ ʙᴇчнᴏ нᴏ ʍᴏй хуй ᴏбᴩёᴧ ᴄᴨᴏᴄᴏбнᴏᴄᴛь ᴩᴇнᴋᴀᴩнᴀции ᴛᴇᴨᴇᴩь ᴛʙᴏя ʍᴀᴛь ʙ бᴇɜнᴀдёжнᴏʍ ᴨᴏᴧᴏжᴇнии',
'нᴀ ᴩынᴋᴇ ᴛʙᴏю ʍᴀᴛь ᴇбᴀᴧ ɜᴀ ᴨᴩиᴧᴀʙᴋᴏʍ ᴀ ɜнᴀᴇɯь ᴋᴀᴋ ʙᴄё нᴀчᴀᴧᴏᴄь ᴏнᴀ ᴩᴇɯиᴧᴀ ᴨᴩᴏдᴀᴛь ʍнᴇ ᴏᴦуᴩцы ᴋᴏᴛᴏᴩыᴇ ᴄᴏʙᴀᴧᴀ ʙ ᴄʙᴏю ᴄᴨидᴏɜную ᴨᴩᴏщᴇᴧину ᴨᴩидёᴛьᴄя ᴇщё ᴏᴛхуяᴩиᴛь ᴇё',
'нᴀ ʙᴏɜʙыɯᴇнии #ꇙ꒐꒒ꏂꋊꉔ꒐ꏂ꒤ꉧ ᴛʙᴏю ʍᴀᴛь ᴨᴏᴇбᴀᴧ ᴏнᴀ ᴩᴇɯиᴧᴀ ᴨᴏᴧюбᴏʙᴀᴛьᴄя ʙидᴀʍ ᴨᴩиᴩᴏды нᴏ  быᴧ нᴀᴄᴛᴏᴧьᴋᴏ ᴩᴇɜʙый чᴛᴏ ᴇй ᴨᴩиɯᴧᴏᴄь ᴧюбᴏʙᴀᴛьᴄя ʙидᴏʍ ʍᴏᴇᴦᴏ хуя',
'нᴀ ᴩыбᴀᴧᴋᴇ ᴛʙᴏю ʍᴀᴛь ᴇбᴀᴧ ᴨᴏᴋᴀ ᴛʙᴏй бᴀᴛя нᴀᴄᴀжиʙᴀᴧ чᴇᴩʙяᴋᴏʙ нᴀ удᴏчᴋу и ᴨыᴛᴀᴧᴄя ᴨᴏйʍᴀᴛь ᴩыбу я ужᴇ ʙᴏ ʙᴄю дᴏбиʙᴀᴧ ᴄʙᴏиʍ хуёʍ ᴛʙᴏю ɯᴀᴋᴀᴧьную ʍᴀᴛь',
'бᴇɜ ʙыхᴏдных ᴛʙᴏю ʍᴀᴛь ᴇбᴀᴧ ᴨᴏᴋᴀ нᴇ ᴨᴏняᴧ чᴛᴏ нᴀдᴏ чᴛᴏ ᴛᴏ ʍᴇняᴛь ᴨᴏɜʙᴀᴧ ᴛʙᴏᴇᴦᴏ бᴀᴛю и ʍы ʙʍᴇᴄᴛᴇ ᴄ ниʍ ᴩᴇɯиᴧи ʙыᴇбᴀᴛь ᴛя ᴨᴏʍниɯь нᴏᴩʍ ᴛᴏᴦдᴀ ᴨᴏᴧучиᴧᴏᴄь',
'нᴇ ᴋидᴀйᴄя ᴛᴀᴋ нᴀ ʍᴏй хуй ʙᴇдь ᴛы ᴨᴏниʍᴀᴇɯь чᴛᴏ нᴇ ʙыʙᴇɜиɯь ᴇᴦᴏ ᴧучɯᴇ ᴨᴏɜᴏʙи ᴄʙᴏю ʍᴀᴛь у нᴇё и ᴛᴏ бᴏᴧьɯᴇ ɯᴀнᴄᴏʙ ᴇᴦᴏ ᴏдᴀᴧᴇᴛь чᴇʍ у ᴛᴇбя жᴀᴧᴋᴀя ʍᴏнᴀɯᴋᴀ',
' @usirush дᴀжᴇ нᴀᴋуᴩᴇныʍ ᴛʙᴏю ʍᴀᴛь ᴇбᴀᴧ ᴏнᴀ дуʍᴀᴧᴀ чᴛᴏ  ᴨᴩᴏᴄᴛᴏ ᴩᴀд ᴇё ʙидᴇᴛь нᴏ ᴋᴏᴦдᴀ ᴋᴩыᴧᴏ  ᴨᴩᴇдᴄᴛᴀʙᴧяᴧ чᴛᴏ ᴛʙᴏя ʍᴀᴛь нᴇ ᴄᴨидᴏɜнᴀя и  ᴄᴛᴀнᴏʙиᴧᴀᴄь ᴧᴇᴦчᴇ',
'ᴛʙᴏя ʍᴀᴛь ᴩᴇɯиᴧᴀ ɜᴀᴄняᴛь ᴋᴀᴋ я ᴇё ᴇбу ᴨᴏᴛᴏʍ ᴄᴋинуᴧᴀ дᴩуɜьяʍ ᴏни ᴄʍᴏᴛᴩᴇᴧи ʙᴄᴇ ʙидᴏᴄы и ᴨᴏᴛᴏʍ ᴩᴇɯиᴧи чᴛᴏ ʍᴏй хуй нᴀдᴏ ᴨиᴀᴩиᴛь ʙ ᴛʙᴏᴇй ᴦᴧᴏᴛᴋᴇ ᴇɜ ᴇɜ',
'ᴋᴏᴦдᴀ я уʍиᴩᴀᴧ нᴀ дʙижᴇ ᴛʙᴏя ʍᴀᴛь ᴄдᴇᴧᴀᴧᴀ ʍнᴇ ᴦᴏᴩᴧᴏʙᴏй ʍиньᴇᴛ и ʍнᴇ ᴄᴛᴀᴧᴏ ᴛᴀᴋ ᴧᴇᴦчᴇ чᴛᴏ я нᴀчᴀᴧ ʙᴏɜᴩᴏждᴀᴛьᴄя ᴏᴄʍᴏᴛᴩᴇᴧᴄя ʙᴏᴋᴩуᴦ ᴀ ᴏᴋᴀɜᴀᴧᴄя нᴀ ᴩᴇйʙᴇ',
'ʙᴋᴀчᴀᴧ ᴛʙᴏᴇᴦᴏ ᴏᴛцᴀ хуёʍ и ʍᴏᴦу дᴀжᴇ ᴄ чиᴄᴛᴏй ᴄᴏʙᴇᴄᴛью ᴄᴋᴀɜᴀᴛь чᴛᴏ ᴛʙᴏй ᴏᴛᴇц ᴋᴀᴋ ʍᴏᴦ ᴨыᴛᴀᴧᴄя ʍнᴇ ᴏᴛᴄᴏᴄᴀᴛь нᴏ ᴏн ᴨᴏᴧучиᴧ ʍнᴏᴦᴏчиᴄᴧᴇнный уᴩᴏн ᴏᴛ ʍᴏᴇᴦᴏ хуя',
'ᴋᴏᴦдᴀ я ᴄᴇᴧ ʙ ᴛюᴩьʍу ᴛʙᴏя ʍᴀᴛь бᴇᴦᴀᴧᴀ ᴋᴏ ʍнᴇ нᴀ ᴋичу и ᴏᴛᴄᴀᴄыʙᴀᴧᴀ ᴋᴀᴋ бᴇɯᴇнᴀя я нᴀчᴀᴧ ᴋᴏᴩʍиᴛь ᴇё ᴧᴇщᴀʍи ᴨᴏᴛᴏʍу чᴛᴏ ᴋᴀᴋ ᴏнᴀ ʙᴏбщᴇ ɜᴀбᴩᴀᴧᴀᴄь ʙ ᴋᴀʍᴇᴩу',
'нᴇ ᴋᴏᴦдᴀ нᴇ ᴨᴏйʍу ᴏднᴏᴦᴏ ɜᴀчᴇʍ ᴛʙᴏя ʍᴀᴛь ᴛᴀᴋ ᴏбиᴧьнᴏ ᴄᴏᴄёᴛ и ᴋ чᴇʍу ᴏнᴀ ᴄᴛᴩᴇʍиᴛьᴄя ʍᴏжᴇᴛ у нᴇё ᴇᴄᴛь ᴋᴏнᴇчнᴀя цᴇᴧь и я ɜнᴀю ᴋᴀᴋᴀя быᴛь ᴄᴀʍᴏй ʙᴇᴩнᴏй ʍᴏᴇᴦᴏ хую',
'ᴩᴀᴄᴋᴏᴩʍиᴧ ᴛʙᴏю ʍᴀᴛь хуёʍ чᴛᴏ ᴏнᴀ ᴛᴇᴨᴇᴩь яʙᴧяᴛьᴄя ʍᴇᴄᴛныʍ бᴏᴄᴄᴏʍ и ᴇдинᴄᴛʙᴇныʍ ᴋᴛᴏ ᴇё ʍᴏжᴇᴛ ᴋᴩыɯᴏʙᴀᴛь ᴇё нᴀ дᴀнный ʍᴏʍᴇнᴛ ϶ᴛᴏ ʍй хуй ʙᴇдь ᴏнᴀ ʙᴄᴇᴦдᴀ ᴄᴛᴀʙиᴧ ɜᴀ нᴇᴦᴏ ᴄʙᴇчᴋи',
'нᴇ ᴋᴏʍу нᴇ ᴄᴋᴀжу чᴛᴏ ᴛʙᴏя ʍᴀᴛь ужᴇ нᴀяᴩиʙᴀᴇᴛ ʍᴏй хуй ᴨᴏ 100 ᴩᴀɜу ʙᴇдь ᴏнᴀ ϶ᴛᴏ дᴇᴧᴀᴇᴛ ᴄ чиᴄᴛᴏй ᴄᴏʙᴇᴄᴛью и дуʍᴀᴇᴛ чᴛᴏ ᴇᴄᴧи ᴄᴏᴄᴀᴛь ʍᴏй хуй ᴛᴀᴋ чᴀᴄᴛᴏ ᴏнᴀ ᴨᴏᴨᴀдёᴛ ʙ ᴩᴀй',
'ᴛʙᴏя ʍᴀᴛь ᴛᴀᴋᴀя бᴇᴄᴨᴏнᴛᴏʙᴀя чᴛᴏ ᴨᴩᴇждᴇ чᴇʍ ᴇё ʙыᴇбᴀᴛь я дᴀю нᴀ ᴩᴏᴛᴀн ᴛʙᴏᴇʍу ᴏᴛцу ʙᴇдь ᴛᴀᴋ ʍᴏй хуй ужᴇ ᴦᴏᴛᴏʙ ᴋ ᴄᴛᴩёʍнᴏй ᴦᴧᴏᴛᴋᴇ ᴛʙᴏᴇй ᴇбучᴇй ʍᴀᴛухᴇ',
' @uzirusg ᴛʙᴏᴇй ʍᴀᴛᴇᴩи ᴨᴏʍинᴋи ᴄʙᴏиʍ хуёʍ ᴏᴩᴦᴀниɜᴏʙᴀᴧ и ʙᴄᴇ ᴩᴏдᴄᴛʙᴇниᴋи быᴧи ᴩᴀды ʙᴇдь ʍᴏй хуй ϶ᴛᴏ ᴄᴀʍый ᴨᴏчёᴛный ᴦᴏᴄᴛь нᴀ их ᴨᴏʍинᴋᴀх ᴇɜ ᴇɜ']
        self.db.set(self.strings["name"], "state", True)
        while self.db.get(self.strings["name"], "state"):
            await message.respond(sh+(random.choice(shablon)), file=media)
            await sleep(time)
            
    async def sil2cmd(self, message):
        """🇫🇷 Запускает модуль по 2 шаблону 🇫🇷"""
        args = utils.get_args_raw(message)
        if not args:
            self.db.set(self.strings["name"], "state", False)
            await utils.answer(message, "<b>🇫🇷 Мᴏдуᴧь ᴨᴏ 2 ɯᴀбᴧᴏну остановлен 🇫??</b>")
            return
        await utils.answer(
            message,
            "<b>🇫🇷 Ꮇᴏдуᴧь ᴨᴏ 2 ɯᴀбᴧᴏну ɜᴀᴨущᴇн 🇫🇷</b>\n\n"
            "<b>🇫🇷 Ꮞᴛᴏбы ᴏᴄᴛᴀнᴏʙиᴛь ʍᴏдуᴧь, нᴀᴨиɯи <code>.sil2</code></b>",
        )
        text = args.split(' ')
        time = int(text[0])
        sh = text[1:]
        sh = ' '.join(sh)
        reply = await message.get_reply_message() 
        shabl3 = [
        '#ꇙ꒐꒒ꏂꋊꉔ꒐ꏂ꒤ꉧ яйцᴏʍ ᴛᴇ ᴦᴧᴀɜ ʙыбᴀʙиᴧ 🇫🇷)',
'хуᴇʍ ᴛя ᴨᴏᴩᴏдиᴧ 🇫🇷)',
'ʍᴏй хуй ᴋᴀᴋ ᴄᴀᴨᴇᴩ ʙ ᴋᴏᴛᴏᴩый ᴩᴀɜ ᴨиɜду ʍᴀʍᴋи ᴛʙᴏᴇй ᴏбᴇɜʙᴩᴇжиʙᴀᴇᴛ 🇫🇷)',
'ᴏᴛᴄᴏᴄи хуй ᴏбᴇɜьянᴀ ᴇбᴀнᴀя 🇫🇷)',
'ʍᴀʍᴀᴛᴋу ᴛʙᴏю ᴄ хуя ᴏᴨᴩᴏᴋинуᴧ ᴨᴩяʍᴏ ᴦᴧᴀɜᴀʍи нᴀ яйцᴀ ᴄʙᴏᴇй ᴄᴏбᴀᴋи ᴀᴀххᴀхᴀ 🇫🇷)',
'ᴋᴏᴦдᴀ ʍᴀᴛь ᴛʙᴏя ᴛᴏнуᴧᴀ я ᴨᴏдуʍᴀᴧ чᴛᴏ ᴋидᴀю ᴇй ᴄᴨᴀᴄᴀᴛᴇᴧьный ᴋᴩуᴦ ᴀ ᴏᴋᴀɜᴀᴧᴏᴄь ᴋинуᴧ хуй ʙ нᴇᴇ уᴛᴏᴨиᴧ цыᴦᴀнᴋу бᴇдную ᴀхᴀххᴀ 🇫🇷)',
'ᴛы ужᴇ ᴨᴏйʍи ᴛᴇбя бᴏʍжи ʙᴏᴋɜᴀᴧьныᴇ ɜᴀдᴇᴧᴀᴧи 🇫🇷)',
'#ꇙ꒐꒒ꏂꋊꉔ꒐ꏂ꒤ꉧ ᴩыᴧᴏ ᴛʙᴏᴇ ᴨᴏʍᴏйнᴏᴇ ᴇбᴀᴧ 🇫🇷)',
'ᴛʙᴏя ʍᴀᴛь ʍᴏй хуй ᴄᴋуᴩиᴧᴀ нᴀᴩᴋᴏʍᴀнᴋᴀ ɯᴏᴧᴀʙнᴀя ᴀхᴀххᴀ 🇫🇷)',
'я хуй ʙᴏн ᴛудᴀ ʙ ᴇбᴀᴧᴏ ʍᴀʍᴋᴇ ᴛʙᴏᴇй ᴋинуᴧ ᴨᴩинᴇᴄи ʍнᴇ ᴏбᴩᴀᴛнᴏ ᴇᴦᴏ ᴨᴄинᴀ ᴇбᴀнᴀя ᴀхᴀхᴀ 🇫🇷)',
'϶ᴛᴏ ᴛы чᴛᴏᴧи ᴨᴩᴀɜдничную ᴩᴇчь ᴦᴏʙᴏᴩиᴧ ʙ нᴏʙый ᴦᴏд ʍᴏих яиц бᴧяᴛь ᴨᴩᴇɜидᴇнᴛ ᴀххᴀхᴀ 🇫🇷)',
'ᴨиɜдᴇц яйцᴀʍи хᴧᴏᴨᴀю ᴋᴏᴦдᴀ ʍᴀʍᴀня ᴛʙᴏя ᴨᴇᴩᴇд ʍᴏиʍ хуᴇʍ ᴋуʙыᴩᴋᴀᴇᴛᴄя 🇫🇷)',
'ᴄʙᴏй хуй ᴧᴏжу ᴛᴇбᴇ ɜᴀ щᴇᴋу ᴋᴀᴋ ᴩуᴋи ʙ ᴋᴀᴩʍᴀн ᴀхᴀххᴀ 🇫🇷)',
'ʍᴏй хуй ᴋᴀᴋ ʍинᴏʍᴇᴛ ᴋᴧиᴛᴀᴩ ᴛʙᴏᴇй ᴨᴏᴧудᴏхᴧᴏй ʍᴀʍᴀɯᴇ бᴏʍбиᴛ ᴀххᴀхᴀ 🇫🇷)',
'я ᴛʙᴏю ʍᴀᴛь ᴩыᴧᴏʍ ᴏб ᴋᴀɸᴇᴧь уᴇбᴀᴧ ᴀхᴀхᴀ 🇫🇷)',
'нᴇᴨᴩиʙычнᴀ ᴄᴀᴄᴀᴧᴀ ᴛы ʍнᴇ 🇫🇷)',
'ʍᴏй хуй ᴛᴇбя ᴇщᴇ ʙ ʍᴧᴀдᴇнчᴇᴄᴛʙᴇ хᴏдиᴛь учиᴧ ᴏᴛᴄᴏᴄи ʙ бᴧᴀᴦᴏдᴀᴩнᴏᴄᴛь ᴀхᴀхᴀ 🇫🇷)',
'нᴏᴩʍᴀᴧьныᴇ дᴇᴛи ʍᴀʍᴋину ᴛиᴛьᴋу ᴄᴏᴄуᴛ, ᴀ ᴛы ʍᴏй хуй ᴀхᴀхᴀх 🇫🇷)',
'я ᴛʙᴏю ʍᴀʍу ᴋᴀждый дᴇнь хуᴇʍ ʙыᴦуᴧиʙᴀю 🇫🇷)',
'я ʙчᴇᴩᴀ ᴋᴄᴛᴀᴛи ɸиᴧьʍ ᴨᴏᴄʍᴏᴛᴩᴇᴧ ᴨᴩᴏ ʍᴀᴛь ᴛʙᴏю ɯᴀᴧᴀʙу ᴋᴀᴋ ᴇᴇ нᴇᴦᴩы ᴇбᴀᴧи ʙ ᴀнᴀᴧ 🇫🇷)',
'ʍᴏй хуй ᴋᴀᴋ ᴋᴧᴏун циᴩᴋᴏʙᴏй ᴋᴧиᴛᴀᴩ ʍᴀʍы ᴛʙᴏᴇй ʙᴇᴄᴇᴧиᴛ ᴀххᴀхᴀ 🇫🇷)',
'ᴨᴩи чᴇᴩнᴏбыᴧьᴄᴋᴏй ᴀʙᴀᴩии ᴄᴀᴄᴀᴧᴀ ᴛы ʍнᴇ 🇫🇷)',
'я хуᴇʍ ʙᴏ ᴩᴛу ᴛʙᴏᴇй ʍᴀʍы ᴩыбᴀчиᴧ и ᴦᴧᴀнды ᴇᴇ ʙыудиᴧ ᴀххᴀхᴀ 🇫🇷)',
'ᴄʙᴏиʍи яйцᴀʍи щᴇᴋи ʍᴀʍᴋᴇ ᴛʙᴏᴇй щиᴋᴏчу ᴀххᴀхᴀ 🇫🇷)',
'я ᴛʙᴏю ʍᴀᴛь ᴩыᴧᴏʍ ᴏб ᴋᴀɸᴇᴧь уᴇбᴀᴧ ᴀхᴀхᴀ 🇫🇷)',
'ᴛы ᴨᴏниʍᴀᴇɯь чᴛᴏ ʍᴏй хуй ᴋᴀᴋ ᴋᴏʍбᴀйн ᴇбᴀᴧᴏ ʍᴀʍᴀɯᴇ ᴛʙᴏᴇй ʙᴄᴨᴀхᴀᴧ 🇫🇷)',
'ᴛы жᴇ ᴨᴏниʍᴀᴇɯь чᴛᴏ ʍᴏй хуй ᴩᴏᴛ ᴛʙᴏᴇй ʍᴀʍы ᴄᴇбᴇ ᴨᴏдчиниᴧ 🇫🇷)',
'#ꇙ꒐꒒ꏂꋊꉔ꒐ꏂ꒤ꉧ ᴋᴄᴛᴀᴛи ʍᴀʍу ᴇбᴀᴧ ᴛʙᴏю 🇫🇷)',
'ᴋᴄᴛᴀᴛи чᴧᴇнᴀʍ ᴛы удуɯиᴧ 🇫🇷)',
'нᴀхуй ᴛʙᴏя ʍᴀᴛь ʍᴏй хуй ɜᴀжᴇʙᴀᴧᴀ дуᴩᴀ ᴇбᴀнᴀя ᴀᴀххᴀхᴀ? 🇫🇷)',
'ʙ ʍᴀʍᴋу ᴛʙᴏю хуᴇʍ хуᴋнуᴧ ᴀхᴀххᴀ 🇫🇷)',
'ᴏбиᴧьнᴏ ʍᴏй хуй ᴏᴛᴄᴀᴄыʙᴀᴇɯь ɯᴏᴧᴀʙᴀ ᴇбᴀнᴀя 🇫🇷)',
'я щᴀᴄ ʙнᴀᴛуᴩᴇ ʍᴀᴛь ᴛʙᴏю ᴇбᴀᴧᴏʍ ʙ ᴀᴄɸᴀᴧьᴛ ʙᴛᴏᴨчу ᴧяᴩʙу дуᴩᴧиʙую ᴀɜᴀххᴀхᴀ 🇫🇷)',
'нᴀхуй ᴛʙᴏя ʍᴀᴛь ʍᴏй хуй ʙ ɜᴀᴦᴄ ᴨᴏᴛᴀщиᴧᴀ ᴀхᴀххᴀ? 🇫🇷',
'ᴨиɜдᴇц ᴛʙᴏя ʍᴀᴛь иɜ ʍᴇᴩᴛʙых ʙᴏᴄᴄᴛᴀᴧᴀ ᴩᴀди ʍᴏᴇᴦᴏ хуя хᴀхᴀхᴀ 🇫🇷)',
'ʍᴀʍы ᴛʙᴏᴇй ᴋᴧиᴛᴀᴩ хуᴇʍ ʙ уɜᴇᴧᴏᴋ ᴄʙᴇɜᴀᴧ ᴀххᴀхᴀ 🇫🇷)',
'я хуᴇʍ ᴄʙᴏиʍ ᴀʙиᴀудᴀᴩ ᴨᴏ ᴋᴧиᴛᴏᴩу ᴛʙᴏᴇй ʍᴀʍᴀни нᴀнᴇᴄ ᴀхᴀххᴀ 🇫🇷)',
'хуᴇʍ ɜᴀ щᴇᴋу ʍᴀʍы ᴛʙᴏᴇй дᴇᴄᴀнᴛиᴩᴏʙᴀᴧᴄя 🇫🇷)',
'ᴄ ᴩᴀдᴏᴄᴛью ᴛуᴛ ᴄᴀᴄи ʍнᴇ 🇫🇷)',
'я ʍᴀʍу ᴛʙᴏю ᴋᴏчᴇᴩᴦᴏй ᴇбᴀᴧ 🇫🇷)',
'я ᴛʙᴏᴇʍу бᴀᴛᴇ нᴀ ʍᴏᴦиᴧу ᴄᴩᴀᴧ 🇫🇷)',
'я ᴛʙᴏю ᴨᴏᴧудᴏхᴧую ʍᴀʍᴀɯу дᴏ инᴄуᴧьᴛᴀ ᴇбᴀᴧ ᴄын чуᴩᴋи ᴇбᴀнᴏй ᴀхᴀхᴀх 🇫🇷)',
'я жᴇ щᴀᴄ ᴨᴩяʍᴏ ᴛуᴛ хуᴇʍ ᴛᴇбя ᴨᴇᴩᴇᴇду ᴀххᴀ)',
'ʍᴀᴛуху ᴛʙᴏю ᴨᴏ ᴩунᴇᴛу ᴨᴇᴩᴇᴇбᴀᴧ 🇫🇷)',
'чᴧᴇнᴀʍ ᴄ ᴛя ᴨᴏᴩᴏɸᴧᴇᴧ 🇫🇷)',
'ᴋᴀᴋ буʍᴇᴩᴀнᴦ ᴄʙᴏй хуй ʙ ʍᴀʍᴋу ᴛʙᴏю ᴋидᴀю хᴀхᴀх 🇫🇷)',
'ʙᴄᴇ ᴧюди нᴀ ᴄᴛуᴧᴇ ᴄидяᴛ ᴀ ʍᴀᴛь ᴛʙᴏя нᴀ ʍᴏй хуй ᴨᴩиᴄᴇᴧᴀ дуᴩᴀ ᴇбᴀнᴀя ᴀхᴀххᴀ 🇫🇷)',
'нᴀхуй ᴛʙᴏя ʍᴀᴛь ᴋᴏᴦдᴀ ᴨᴏ ᴧᴇᴄᴇнᴋᴀʍ ɯᴀᴦᴀᴇᴛ ɜᴀ ʍᴏй хуй дᴇᴩжиᴛᴄя? ᴀхᴀхᴀх 🇫🇷)',
'ᴨуɜᴀᴛый ᴄᴀᴄᴇɯ 🇫🇷)',
'ᴨᴀᴧᴇнᴀʍ ᴛя ʙыᴇбᴀᴧ 🇫🇷)',
'ᴋᴧиᴛᴀᴩ ᴛʙᴏᴇй ʍᴀʍᴋи ᴄ ʍᴏᴇʍ хуᴇʍ ядᴇᴩную ʙᴏйну уᴄᴛᴩᴏиᴧ ᴀхᴀххᴀ 🇫🇷)',
'ʍᴀʍᴀня ᴛʙᴏя хуᴇʍ ʍᴏиʍ ᴏʍᴏᴧᴀжиʙᴀᴇᴛᴄя ᴨᴏᴛᴀᴄᴋухᴀ ᴇбᴀнᴀя 🇫🇷)',
'я ᴄʙᴏй хуй ʙ ᴛᴇ ʙыᴦуᴧиʙᴀᴧ 🇫🇷)',
'щᴀ ᴨиɜдᴀ у ᴛʙᴏᴇй ʍᴀʍы ᴨᴏᴄᴧᴇ  хуя  #ꇙ꒐꒒ꏂꋊꉔ꒐ꏂ꒤ꉧ ʙᴀᴧюᴛу ᴨᴩиниʍᴀᴛь нᴀчнᴇᴛ ᴋᴀᴋ бᴀнᴋᴏʍᴀᴛ ᴇбᴀᴛь 🇫🇷.',
'я ᴛʙᴏᴇй ʍᴀʍу ᴨиɜду нᴀбиʙᴀю ᴋᴀᴋ ɸуᴛбᴏᴧьный ʍячиᴋ 🇫🇷.',
'щᴀ я ᴛʙᴏᴇй ʍᴀʍᴇньᴋᴇ ʙ ᴨиɜду ᴛᴩᴇх ᴏчᴋᴏʙый чᴧᴇнᴏʍ ɜᴀᴦᴏню 🇫🇷.',
'ᴛы ʍᴏю ɜᴀᴧуᴨу ᴩᴇɸᴧᴇᴋᴛᴏᴩнᴏ ᴏᴛᴄᴀᴄыʙᴀᴇɯь, дяᴛᴇᴧ ᴇбᴀный 🇫🇷.',
'щᴀ я ʙ ᴨиɜдᴇ ᴛʙᴏᴇй ʍᴀʍы ᴄᴋʙᴀжину чᴧᴇнᴏʍ ᴨᴩᴏбуᴩю, дᴀ ᴛᴀᴋую чᴛᴏ чᴇᴩᴇɜ нᴇᴇ ʙ ᴧᴏндᴏн ᴋᴀᴛᴀᴛьᴄя ʍᴏжнᴏ будᴇᴛ, ᴨхᴀх ᴄуᴋᴀ 🇫🇷.',
'у ᴛя ʍᴀᴛь нᴀ ʍᴏᴇʍ хуᴇ ᴨᴏᴄᴧᴇдний ᴩᴇйᴄ ᴨᴩᴏᴇбᴀᴧᴀ 🇫🇷.',
'щᴀ я ᴋᴧиᴛᴏᴩ ᴛʙᴏᴇй ʍᴀʍы иᴄᴨᴏᴧьɜую дᴧя ᴄᴏɜдᴀния ᴩᴀɜуʍᴀ и ᴛᴇбᴇ нᴀ дᴇнь ᴩᴏждᴇния ᴨᴏдᴀᴩю бᴀᴧʙᴀн ᴄуᴋᴀ 🇫🇷.',
'ну ᴄʍᴏᴛᴩи, щᴀᴄ я бᴇᴩу ᴄʙᴏй чᴧᴇн ʙ ᴩуᴋи и ʙыᴇɜжᴀю ᴇбᴀᴛь ᴛʙᴏю ʍᴀʍᴀɯᴋу 🇫🇷.',
'у ᴛя ʍᴀᴛь нᴀ ʍᴏᴇʍ чᴧᴇнᴇ бᴇᴩᴇʍᴇннᴀя ᴛᴏбᴏй ᴨᴧᴇᴄᴋᴀᴧᴀᴄь дуᴩᴀ ᴇбᴀнᴀя 🇫🇷.',
'я ᴛʙᴏю ʍᴀᴛь ᴩыбᴋу ᴇбᴀную хуᴇʍ ʙ ᴩᴏᴛ ᴄуɯиᴧ 🇫🇷.',
'у ᴛя ʍᴀᴛь ʍᴏй чᴧᴇн ᴄᴏᴄᴀᴧᴀ ᴋу 🇫🇷.',
'ᴀнᴛидᴇᴨᴩᴇᴄᴄᴀнᴛичнᴏ ᴛы ʍᴏй чᴧᴇн ᴏᴛᴄᴏᴄᴀᴧᴀ ᴋᴄᴛᴀᴛи 🇫🇷.',
'ɸу ʍᴀʍу ᴛʙᴏю нᴀ иɜнᴀнᴋу ᴨᴇᴩᴇʙᴇᴩнуʙ нᴀ ɜᴀᴧуᴨу нᴀᴛянуᴧ и ᴨᴏɯᴇᴧ ᴛᴇбя ʙ ᴏчᴇᴧᴏ ᴇбᴀᴛь хих 🇫🇷.',
'щᴀ я ᴄʙᴏиʍ чᴧᴇнᴏʍ ʙ ᴨиɜдᴇ ᴛʙᴏᴇй ʍᴀʍы ᴀнᴏʍᴀᴧию ʙыɜᴏʙу иɜ ᴋᴏᴛᴏᴩᴏй ᴨᴏᴛᴏʍ ʙᴇᴄь ʍиᴩ будᴇᴛ жᴇᴧᴇɜную ᴩуду ᴩыᴛь 🇫🇷.',
'я щᴀᴄ ᴋᴀᴋ ʙᴀнᴦᴀ ᴛᴇбᴇ ᴦᴏʙᴏᴩю, ᴛᴇбя ᴄудьбᴀ ᴏᴨяᴛь ᴄ ʍᴏиʍ чᴧᴇнᴏʍ ᴄʙᴇдᴇᴛ и будᴇɯь ᴄᴏᴄᴀᴛь ᴇᴦᴏ дᴏᴧᴦᴏ и ᴄчᴀᴄᴛᴧиʙᴏ 🇫🇷.',
'щᴀ я ᴛʙᴏᴇ ᴇбᴀᴧᴏ ʙ бᴇᴛᴏн ʙᴛᴏᴨᴛᴀю ᴛы будᴇɯь ʙʍᴇᴄᴛᴏ ᴧᴇжᴀчᴇᴦᴏ ᴨᴏᴧицᴇйᴄᴋᴏᴦᴏ нᴀ дᴏᴩᴏᴦᴇ ʙᴀᴧяᴛьᴄя 🇫🇷.',
'ʍᴏй хуй ᴛʙᴏᴇ ᴇбᴀᴧᴏ ᴋᴀᴋ ᴧᴀʙинᴀ нᴀᴄᴛиᴦ и нᴀхуй ᴩᴀɜᴩуɯиᴧ 🇫🇷.',
'ᴛы нᴀхуй ʍᴏй хуй ʙ ᴨᴏᴄᴧᴇдний ᴨуᴛь ᴋᴀᴋ ʙᴏйнᴀ ᴇбᴀᴛь ᴨᴩᴏʙᴏжᴀᴧ? хᴇхᴇᴋᴀю 🇫🇷.',
'щᴀ я ᴛᴇбя ᴄʙᴏю ᴋᴏнчу ᴨиᴛь ɜᴀᴄᴛᴀᴧю будᴛᴏ бы ϶ᴛᴏ ᴨᴩиʙᴏᴩᴏᴛнᴏᴇ ɜᴇᴧьᴇ, чᴛᴏб ᴛы ʙ ʍᴏй хуй ʙᴧюбиᴧᴄя, ᴋᴧᴏун ᴇбᴀный 🇫🇷.',
'щᴀ я ᴛʙᴏᴇ ᴩыᴧᴏ чᴧᴇнᴏʍ ᴨᴏᴋᴏᴩю ᴋᴀᴋ ᴋᴏᴦдᴀ ᴛᴏ ᴛʙᴏя ʍᴀᴛь ϶ʙᴇᴩᴇᴄᴛ ᴩᴀди ʍᴏᴇᴦᴏ хуя 🇫🇷.',
'у ᴛя ʍᴀᴛь ᴨᴇᴩᴇд ʍᴏиʍ чᴧᴇнᴏʍ ᴨᴏдᴄᴛᴇᴧиᴧᴀᴄь ᴋᴀᴋ ᴋᴏʙᴩиᴋ ᴇбᴀᴛь. я ᴏб нᴇᴇ ᴇщᴇ ᴋᴀᴋ хуй ᴛᴀᴋ и нᴏᴦи ʙыᴛиᴩᴀᴧ, хихи-ᴋ 🇫🇷.',
'чᴧᴇнᴏʍ ʙ ᴛя ᴛᴏᴨнуᴧ 🇫🇷.',
'щᴀ я ᴛʙᴏю ʍᴀʍᴋу чᴧᴇнᴏʍ ᴩᴀᴄᴛᴏᴨᴧю ᴋᴀᴋ ʍᴀᴄᴧᴏ нᴀхуй 🇫🇷.',
'у ʍᴇня чᴧᴇн ᴛʙᴏй ᴩᴏᴛ ᴛяᴦᴀᴧ ᴋᴀᴋ ᴦиᴩю ᴇбᴀᴛь, хихи-ᴋ 🇫🇷.',
'щᴀ я ᴄʙᴏй чᴧᴇн дᴏᴄᴛᴀну у ᴛя ʍᴀᴛь ᴏᴨяᴛь ᴇᴦᴏ ᴏᴛ ᴛᴇбя ᴩᴛᴏʍ ɜᴀбᴀᴩиᴋᴀдиᴩуᴇᴛ 🇫🇷.',
'ᴛы у ʍᴇня нᴀ хуᴇ щᴀᴄ чᴧᴇнᴏɜᴀʙиᴄиʍыʍ будᴇɯь, чучʍᴇᴋ ᴇбᴀный 🇫🇷.',
'ᴛы ᴨᴏниʍᴀᴇɯь чᴛᴏ ʍᴏй хуй ᴋᴀᴋ ᴨᴏдᴀᴩᴏᴋ униʙᴇᴩᴄᴀᴧᴇн, ᴧиɯь ᴨᴏ϶ᴛᴏʍу я ᴛᴇбᴇ ᴇᴦᴏ нᴀ ʙᴄᴇ ᴨᴩᴀɜдниᴋи ᴄᴏᴄᴀᴛь дᴀю, хих 🇫🇷.',
'ᴛы ᴨᴏниʍᴀᴇɯь чᴛᴏ у ᴛя иɜᴏ ᴩᴛᴀ чᴧᴇнᴏʍ бᴏʍжᴀᴛᴄᴋиʍ ʙᴏняᴇᴛ ʍнᴇ дᴀжᴇ жᴀᴧᴋᴏ ᴄʙᴏй чᴧᴇн ᴏб ᴛʙᴏй ᴩᴏᴛ ᴨᴩᴏᴦниʙɯий ʍᴀᴩᴀᴛь ᴄуᴋᴀ 🇫🇷.']
        self.db.set(self.strings["name"], "state", True)
        while self.db.get(self.strings["name"], "state"):
            await message.respond(sh+(random.choice(shabl3)))
            await sleep(time)