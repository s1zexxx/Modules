# meta author: s1zex
#meta developer: @yuki_marry
import random
from asyncio import sleep
import os
from .. import loader, utils
from telethon.tl.functions.users import GetFullUserRequest
import time 
from telethon.tl.types import Message

class S1zexMod(loader.Module):
    '''–ú–æ–¥—É–ª—å by s1zex'''
    strings = {
    "name":  "s1zex üî™ ",
    "loading": "<b>üî™ loading...</b>...</b>",
    "not_chat": "<b>üî™ –¢—ã –∏·¥¶·¥©·¥Ä·¥á…Ø—å ·¥Ñ  ç·¥è–∏ ç ·¥®·¥á–Ω–∏·¥Ñ·¥è ç ·¥ã·¥Ä·¥ã ·¥Ñ ·¥á–¥·¥è–π..</b>",} 

    async def client_ready(self, client, db) -> None:
        self.db = db
        self.client = client
        
        
    async def szxhelpcmd(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é [.szxhelp]"""
        args = utils.get_args_raw(message)
        await message.edit("üî™")
        time.sleep(0.1)
        await message.edit("üî™ s")
        time.sleep(0.1)
        await message.edit("üî™ s1")
        time.sleep(0.1)
        await message.edit("üî™ s1z")
        time.sleep(0.1)
        await message.edit("üî™ s1ze")
        time.sleep(0.1)
        await message.edit("üî™ s1zex")
        time.sleep(0.1)
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()

        message = await utils.answer(message, self.strings("loading"))

        try:
            user_id = (
                (
                    (
                        await self._client.get_entity(
                        args if not args.isdigit() else int(args)
                        )
                    ).id
                )
                if args
                else reply.sender_id
            )
        except Exception:
            user_id = self._tg_id

            user = await self._client(GetFullUserRequest(user_id))

            user_ent = user.users[0]

            photo = await self._client.download_profile_photo(user_ent.id, bytes)

            user_info = (
            "<b>üî™ &  ùô∑ùöéùöïùöô & üî™</b>\n\n"
            "<b>.szxhelp - –ó·¥Ä·¥®—É·¥Ñ·¥õ–∏·¥õ—å ·¥Ä–Ω–∏ ç·¥Ä—Ü–∏—é —Ö·¥á·¥ß·¥®—ã</b>\n\n\n"
            "<b>.szx1 - –°·¥á·¥ã—É–Ω–¥—ã + –®·¥Ä·¥®·¥ã·¥Ä: –ó·¥Ä·¥®—É·¥Ñ·¥õ–∏·¥õ—å  ç·¥è–¥—É·¥ß—å ·¥®·¥è ·¥®·¥á·¥© ô·¥è ç—É …Ø·¥Ä–±·¥ß·¥è–Ω—É</b>\n\n"
            "<b>.szx2 - –°·¥á·¥ã—É–Ω–¥—ã + –®·¥Ä·¥®·¥ã·¥Ä: –ó·¥Ä·¥®—É·¥Ñ·¥õ–∏·¥õ—å  ç·¥è–¥—É·¥ß—å ·¥®·¥è  ô·¥õ·¥è·¥©·¥è ç—É …Ø·¥Ä–±·¥ß·¥è–Ω—É</b>\n\n"
            "<b>.szx4 - –°·¥á·¥ã—É–Ω–¥—ã + –®·¥Ä·¥®·¥ã·¥Ä: –ó·¥Ä·¥®—É·¥Ñ·¥õ–∏·¥õ—å  ç·¥è–¥—É·¥ß—å ·¥®·¥è —á·¥á·¥õ ô·¥á·¥©·¥õ·¥è ç—É …Ø·¥Ä–±·¥ß·¥è–Ω—É</b>\n\n"
            "<b>.szxmedia - –°·¥á·¥ã—É–Ω–¥—ã + –®·¥Ä·¥®·¥ã·¥Ä: –ó·¥Ä·¥®—É·¥Ñ·¥õ–∏·¥õ—å  ç·¥è–¥—É·¥ß—å –º–µ–¥–∏–∞</b>\n\n"
            f"<b>User üî™ name:</b>@{user_ent.username or '‚ò†Ô∏è'}\n"
            f"<b>First üî™ name:</b> {user_ent.first_name or 'üö´'}\n"
            f"<b>I'D:</b> <code>{user_ent.id}</code>\n"
        )

        if photo:
            await self._client.send_file(
                message.peer_id,
                photo,
                caption=user_info,
                link_preview=False,
                reply_to=reply.id if reply else None,
            )
            if message.out:
                await message.delete()
        else:
            await utils.answer(
                message,
                user_info,
                reply_to=reply.id if reply else None,
                link_preview=False,
            )


    async def  szx2cmd(self, message):
        """–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: .szx2 –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö & –û–±—Ä–∞—â–µ–Ω–∏–µ. \n"""
        args = utils.get_args_raw(message)
        if not args:
            self.db.set(self.strings["name"], "state", False)
            await utils.answer(message, "êåë·ßê–¥—É·ßò—å - szx - –ó·¥Ä·¥ã·¥è–Ω—á–∏·¥ß·¥Ä ·¥á–±·¥Ä·¥õ—å …Ø·¥Ä·¥ß·¥Ä ô")
            return
        await utils.answer(
            message,
            "<b>êåë·ßê–¥—É·ßò—å - szx - –ù·¥Ä—á·¥Ä·¥ß –∏·¥Ñ·¥õ·¥©·¥á–±·¥ß—è·¥õ—å ·¥Ñ—ã–Ω·¥ã·¥è ô …Ø·¥Ä·¥ß·¥Ä ô\n\n"
        "–î·¥Ä–±—ã  ô—ã·¥ã·¥ß—é—á–∏·¥õ—å  ç·¥è–¥—É·¥ß—å - szx - ·¥®·¥©·¥è·¥®–∏…Ø–∏ <code>.szx2</code></b>"
        )
        text = args.split(' ')
        time = int(text[0])
        sh = text[1:]
        sh = ' '.join(sh)
        reply = await message.get_reply_message()
        shabl = ["—Ç–≤–æ—é –º–∞—Ç—å —à–ª—é—Ö—É –µ–±–µ—Ç s1zex",]
        self.db.set(self.strings["name"], "state", True)
        self.db.set(self.strings["name"], "state", True)
        while self.db.get(self.strings["name"], "state"):
            await message.respond(sh+(random.choice(shabl)))
            await sleep(time)
            
    async def szxmediacmd(self, message):
        '''–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–¥—É–ª—å —Å –≤–∏–¥–µ–æ/—Ñ–æ—Ç–æ/–≥—Å/–∫—Ä—É–∂–∫–æ–º/–≥–∏—Ñ'''
        args = utils.get_args_raw(message)
        if not args:
            self.db.set(self.strings["name"], "state", False)
            await utils.answer(message, "<b>–ü—Ä–µ–∫—Ä–∞—Ç–∏–ª –µ–±–∞—Ç—å –¥–µ—Ç–µ–π —à–ª—é—Ö</b>")
            return
        await utils.answer(
            message,
            "<b>êåë·ßê–¥—É·ßò—å - szx - –ù·¥Ä—á·¥Ä·¥ß –∏·¥Ñ·¥õ·¥©·¥á–±·¥ß—è·¥õ—å ·¥Ñ—ã–Ω·¥ã·¥è ô …Ø·¥Ä·¥ß·¥Ä ô\n\n"
        "–î·¥Ä–±—ã  ô—ã·¥ã·¥ß—é—á–∏·¥õ—å  ç·¥è–¥—É·¥ß—å - szx - ·¥®·¥©·¥è·¥®–∏…Ø–∏ <code>.szxmedia</code></b>",
        )
        text = args.split(' ')
        time = int(text[0])
        sh = text[1:]
        sh = ' '.join(sh)
        reply = await message.get_reply_message()
        media = reply.media
        shablon = [" –º–∞—Ç—å —Ç–≤–æ—é —à–ª—é—Ö—É –µ–±–µ—Ç –≤–µ–ª–∏–∫–∏–π s1zex",
]
        self.db.set(self.strings["name"], "state", True)
        while self.db.get(self.strings["name"], "state"):
            await message.respond(sh+(random.choice(shablon)), file=media)
            await sleep(time)
            
    async def szx1cmd(self, message):
        """–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: .szx1 –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö & –û–±—Ä–∞—â–µ–Ω–∏–µ. \n"""
        args = utils.get_args(message)
        if not args:
            self.db.set(self.strings["name"], "state", False)
            await utils.answer(message, "<b>êåë·ßê–¥—É·ßò—å - szx - –ó·¥Ä·¥ã·¥è–Ω—á–∏·¥ß·¥Ä ·¥á–±·¥Ä·¥õ—å …Ø·¥Ä·¥ß·¥Ä ô</b>")
            return
        await utils.answer(
            message,
            "<b>êåë·ßê–¥—É·ßò—å - szx - –ù·¥Ä—á·¥Ä·¥ß –∏·¥Ñ·¥õ·¥©·¥á–±·¥ß—è·¥õ—å ·¥Ñ—ã–Ω·¥ã·¥è ô …Ø·¥Ä·¥ß·¥Ä ô\n\n"
        "–î·¥Ä–±—ã  ô—ã·¥ã·¥ß—é—á–∏·¥õ—å  ç·¥è–¥—É·¥ß—å - szx - ·¥®·¥©·¥è·¥®–∏…Ø–∏ <code>.szx1</code></b>",
        )
        try:
            time = float(args[0])
        except ValueError:
            return
        text = " ".join(utils.get_args_raw(message).split()[1:])
        shabl2 = [" —Ç–≤–æ—é —à–ª—é—Ö—É –º–∞—Ç—å –≤—ã–µ–±–∞–ª @yuki_marry",]
        self.db.set(self.strings["name"], "state", True)
        while self.db.get(self.strings["name"], "state"):
            await message.respond(text + random.choice(shabl))
            await sleep(0.1)
            await sleep(time)


    async def szx4cmd(self, message):
        """–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: .szx4 –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö & –û–±—Ä–∞—â–µ–Ω–∏–µ. \n"""
        args = utils.get_args(message)
        if not args:
            self.db.set(self.strings["name"], "state", False)
            await utils.answer(message, "<b>êåë·ßê–¥—É·ßò—å - szx - –ó·¥Ä·¥ã·¥è–Ω—á–∏·¥ß·¥Ä ·¥á–±·¥Ä·¥õ—å …Ø·¥Ä·¥ß·¥Ä ô</b>")
            return
        await utils.answer(
            message,
            "<b>êåë·ßê–¥—É·ßò—å - szx - –ù·¥Ä—á·¥Ä·¥ß –∏·¥Ñ·¥õ·¥©·¥á–±·¥ß—è·¥õ—å ·¥Ñ—ã–Ω·¥ã·¥è ô …Ø·¥Ä·¥ß·¥Ä ô\n\n"
        "–î·¥Ä–±—ã  ô—ã·¥ã·¥ß—é—á–∏·¥õ—å  ç·¥è–¥—É·¥ß—å - szx - ·¥®·¥©·¥è·¥®–∏…Ø–∏ <code>.szx4</code></b>",     
        )
        try:
            time = float(args[0])
        except ValueError:
            return
        text = " ".join(utils.get_args_raw(message).split()[1:])
        shabl4 = [" —Å–æ—Å–µ—à—å —Å–∞–π–∑–µ–∫—Å—É",]
        self.db.set(self.strings["name"], "state", True)
        while self.db.get(self.strings["name"], "state"):
            await message.respond(text + random.choice(shabl4))
            await sleep(0.1)
            await sleep(time)
